/*
 * generated by Xtext 2.29.0
 */
package es.um.uschema.xtext.skiql.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SkiqlGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SkiQLModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.SkiQLModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSkiQLModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cQueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQueryQueryParserRuleCall_1_0 = (RuleCall)cQueryAssignment_1.eContents().get(0);
		
		//SkiQLModel returns SkiQLModel:
		//    {SkiQLModel}
		//    query=Query
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SkiQLModel}
		//query=Query
		public Group getGroup() { return cGroup; }
		
		//{SkiQLModel}
		public Action getSkiQLModelAction_0() { return cSkiQLModelAction_0; }
		
		//query=Query
		public Assignment getQueryAssignment_1() { return cQueryAssignment_1; }
		
		//Query
		public RuleCall getQueryQueryParserRuleCall_1_0() { return cQueryQueryParserRuleCall_1_0; }
	}
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.Query");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityTypeQueryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationshipTypeQueryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRelationshipQueryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAnyQueryParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Query returns Query:
		//    EntityTypeQuery | RelationshipTypeQuery | RelationshipQuery | AnyQuery
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//EntityTypeQuery | RelationshipTypeQuery | RelationshipQuery | AnyQuery
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EntityTypeQuery
		public RuleCall getEntityTypeQueryParserRuleCall_0() { return cEntityTypeQueryParserRuleCall_0; }
		
		//RelationshipTypeQuery
		public RuleCall getRelationshipTypeQueryParserRuleCall_1() { return cRelationshipTypeQueryParserRuleCall_1; }
		
		//RelationshipQuery
		public RuleCall getRelationshipQueryParserRuleCall_2() { return cRelationshipQueryParserRuleCall_2; }
		
		//AnyQuery
		public RuleCall getAnyQueryParserRuleCall_3() { return cAnyQueryParserRuleCall_3; }
	}
	public class EntityTypeQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.EntityTypeQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSchemaQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cENTITYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSchemaSpecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSchemaSpecEntitySpecParserRuleCall_2_0 = (RuleCall)cSchemaSpecAssignment_2.eContents().get(0);
		private final Assignment cOperationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperationOperationParserRuleCall_3_0 = (RuleCall)cOperationAssignment_3.eContents().get(0);
		
		//EntityTypeQuery returns SchemaQuery:
		//    {SchemaQuery}
		//    'ENTITY' schemaSpec=EntitySpec
		//    (
		//         (operation=Operation)
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SchemaQuery}
		//'ENTITY' schemaSpec=EntitySpec
		//(
		//     (operation=Operation)
		//)?
		public Group getGroup() { return cGroup; }
		
		//{SchemaQuery}
		public Action getSchemaQueryAction_0() { return cSchemaQueryAction_0; }
		
		//'ENTITY'
		public Keyword getENTITYKeyword_1() { return cENTITYKeyword_1; }
		
		//schemaSpec=EntitySpec
		public Assignment getSchemaSpecAssignment_2() { return cSchemaSpecAssignment_2; }
		
		//EntitySpec
		public RuleCall getSchemaSpecEntitySpecParserRuleCall_2_0() { return cSchemaSpecEntitySpecParserRuleCall_2_0; }
		
		//(
		//     (operation=Operation)
		//)?
		public Assignment getOperationAssignment_3() { return cOperationAssignment_3; }
		
		//Operation
		public RuleCall getOperationOperationParserRuleCall_3_0() { return cOperationOperationParserRuleCall_3_0; }
	}
	public class RelationshipTypeQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.RelationshipTypeQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSchemaQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRELKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSchemaSpecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSchemaSpecRelationshipTypeSpecParserRuleCall_2_0 = (RuleCall)cSchemaSpecAssignment_2.eContents().get(0);
		private final Assignment cOperationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperationOperationParserRuleCall_3_0 = (RuleCall)cOperationAssignment_3.eContents().get(0);
		
		//RelationshipTypeQuery returns SchemaQuery:
		//    {SchemaQuery}
		//    'REL' schemaSpec=RelationshipTypeSpec
		//    (
		//         (operation=Operation)
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SchemaQuery}
		//'REL' schemaSpec=RelationshipTypeSpec
		//(
		//     (operation=Operation)
		//)?
		public Group getGroup() { return cGroup; }
		
		//{SchemaQuery}
		public Action getSchemaQueryAction_0() { return cSchemaQueryAction_0; }
		
		//'REL'
		public Keyword getRELKeyword_1() { return cRELKeyword_1; }
		
		//schemaSpec=RelationshipTypeSpec
		public Assignment getSchemaSpecAssignment_2() { return cSchemaSpecAssignment_2; }
		
		//RelationshipTypeSpec
		public RuleCall getSchemaSpecRelationshipTypeSpecParserRuleCall_2_0() { return cSchemaSpecRelationshipTypeSpecParserRuleCall_2_0; }
		
		//(
		//     (operation=Operation)
		//)?
		public Assignment getOperationAssignment_3() { return cOperationAssignment_3; }
		
		//Operation
		public RuleCall getOperationOperationParserRuleCall_3_0() { return cOperationOperationParserRuleCall_3_0; }
	}
	public class AnyQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.AnyQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSchemaQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cANYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSchemaSpecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSchemaSpecSchemaTypeSpecParserRuleCall_2_0 = (RuleCall)cSchemaSpecAssignment_2.eContents().get(0);
		private final Assignment cOperationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperationOperationParserRuleCall_3_0 = (RuleCall)cOperationAssignment_3.eContents().get(0);
		
		//AnyQuery returns SchemaQuery:
		//    {SchemaQuery}
		//    'ANY' schemaSpec=SchemaTypeSpec
		//    (
		//         (operation=Operation)
		//    )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SchemaQuery}
		//'ANY' schemaSpec=SchemaTypeSpec
		//(
		//     (operation=Operation)
		//)?
		public Group getGroup() { return cGroup; }
		
		//{SchemaQuery}
		public Action getSchemaQueryAction_0() { return cSchemaQueryAction_0; }
		
		//'ANY'
		public Keyword getANYKeyword_1() { return cANYKeyword_1; }
		
		//schemaSpec=SchemaTypeSpec
		public Assignment getSchemaSpecAssignment_2() { return cSchemaSpecAssignment_2; }
		
		//SchemaTypeSpec
		public RuleCall getSchemaSpecSchemaTypeSpecParserRuleCall_2_0() { return cSchemaSpecSchemaTypeSpecParserRuleCall_2_0; }
		
		//(
		//     (operation=Operation)
		//)?
		public Assignment getOperationAssignment_3() { return cOperationAssignment_3; }
		
		//Operation
		public RuleCall getOperationOperationParserRuleCall_3_0() { return cOperationOperationParserRuleCall_3_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKeysSpecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVersionHistoryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Operation returns Operation:
		//    KeysSpec | VersionHistory
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//KeysSpec | VersionHistory
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//KeysSpec
		public RuleCall getKeysSpecParserRuleCall_0() { return cKeysSpecParserRuleCall_0; }
		
		//VersionHistory
		public RuleCall getVersionHistoryParserRuleCall_1() { return cVersionHistoryParserRuleCall_1; }
	}
	public class KeysSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.KeysSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKeysSpecAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cKEYSKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//KeysSpec returns KeysSpec:
		//    {KeysSpec}
		//    'KEYS'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{KeysSpec}
		//'KEYS'
		public Group getGroup() { return cGroup; }
		
		//{KeysSpec}
		public Action getKeysSpecAction_0() { return cKeysSpecAction_0; }
		
		//'KEYS'
		public Keyword getKEYSKeyword_1() { return cKEYSKeyword_1; }
	}
	public class RelationshipTypeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.RelationshipTypeSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationshipTypeSpecAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameAsteriskKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Assignment cVariationFilterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariationFilterVariationFilterParserRuleCall_2_0 = (RuleCall)cVariationFilterAssignment_2.eContents().get(0);
		
		//RelationshipTypeSpec returns RelationshipTypeSpec:
		//    {RelationshipTypeSpec}
		//    name=(ID | '*') variationFilter=VariationFilter?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{RelationshipTypeSpec}
		//name=(ID | '*') variationFilter=VariationFilter?
		public Group getGroup() { return cGroup; }
		
		//{RelationshipTypeSpec}
		public Action getRelationshipTypeSpecAction_0() { return cRelationshipTypeSpecAction_0; }
		
		//name=(ID | '*')
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(ID | '*')
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//'*'
		public Keyword getNameAsteriskKeyword_1_0_1() { return cNameAsteriskKeyword_1_0_1; }
		
		//variationFilter=VariationFilter?
		public Assignment getVariationFilterAssignment_2() { return cVariationFilterAssignment_2; }
		
		//VariationFilter
		public RuleCall getVariationFilterVariationFilterParserRuleCall_2_0() { return cVariationFilterVariationFilterParserRuleCall_2_0; }
	}
	public class SchemaTypeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.SchemaTypeSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSchemaSpecAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameAsteriskKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Assignment cVariationFilterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariationFilterVariationFilterParserRuleCall_2_0 = (RuleCall)cVariationFilterAssignment_2.eContents().get(0);
		
		//SchemaTypeSpec returns SchemaSpec:
		//    {SchemaSpec}
		//    name=(ID | '*') variationFilter=VariationFilter?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SchemaSpec}
		//name=(ID | '*') variationFilter=VariationFilter?
		public Group getGroup() { return cGroup; }
		
		//{SchemaSpec}
		public Action getSchemaSpecAction_0() { return cSchemaSpecAction_0; }
		
		//name=(ID | '*')
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(ID | '*')
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//'*'
		public Keyword getNameAsteriskKeyword_1_0_1() { return cNameAsteriskKeyword_1_0_1; }
		
		//variationFilter=VariationFilter?
		public Assignment getVariationFilterAssignment_2() { return cVariationFilterAssignment_2; }
		
		//VariationFilter
		public RuleCall getVariationFilterVariationFilterParserRuleCall_2_0() { return cVariationFilterVariationFilterParserRuleCall_2_0; }
	}
	public class EntitySpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.EntitySpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntitySpecAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameAsteriskKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Assignment cVariationFilterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariationFilterVariationFilterParserRuleCall_2_0 = (RuleCall)cVariationFilterAssignment_2.eContents().get(0);
		
		//EntitySpec returns EntitySpec:
		//    {EntitySpec}
		//    name=(ID | '*') variationFilter=VariationFilter?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{EntitySpec}
		//name=(ID | '*') variationFilter=VariationFilter?
		public Group getGroup() { return cGroup; }
		
		//{EntitySpec}
		public Action getEntitySpecAction_0() { return cEntitySpecAction_0; }
		
		//name=(ID | '*')
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(ID | '*')
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//'*'
		public Keyword getNameAsteriskKeyword_1_0_1() { return cNameAsteriskKeyword_1_0_1; }
		
		//variationFilter=VariationFilter?
		public Assignment getVariationFilterAssignment_2() { return cVariationFilterAssignment_2; }
		
		//VariationFilter
		public RuleCall getVariationFilterVariationFilterParserRuleCall_2_0() { return cVariationFilterVariationFilterParserRuleCall_2_0; }
	}
	public class ReferenceEntitySpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.ReferenceEntitySpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntitySpecAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameAsteriskKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cName_Keyword_1_0_2 = (Keyword)cNameAlternatives_1_0.eContents().get(2);
		private final Assignment cVariationFilterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariationFilterReferenceVariationFilterParserRuleCall_2_0 = (RuleCall)cVariationFilterAssignment_2.eContents().get(0);
		
		//ReferenceEntitySpec returns EntitySpec:
		//    {EntitySpec}
		//    name=(ID | '*' | '_') variationFilter=ReferenceVariationFilter?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{EntitySpec}
		//name=(ID | '*' | '_') variationFilter=ReferenceVariationFilter?
		public Group getGroup() { return cGroup; }
		
		//{EntitySpec}
		public Action getEntitySpecAction_0() { return cEntitySpecAction_0; }
		
		//name=(ID | '*' | '_')
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(ID | '*' | '_')
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//'*'
		public Keyword getNameAsteriskKeyword_1_0_1() { return cNameAsteriskKeyword_1_0_1; }
		
		//'_'
		public Keyword getName_Keyword_1_0_2() { return cName_Keyword_1_0_2; }
		
		//variationFilter=ReferenceVariationFilter?
		public Assignment getVariationFilterAssignment_2() { return cVariationFilterAssignment_2; }
		
		//ReferenceVariationFilter
		public RuleCall getVariationFilterReferenceVariationFilterParserRuleCall_2_0() { return cVariationFilterReferenceVariationFilterParserRuleCall_2_0; }
	}
	public class RelationshipQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.RelationshipQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationshipQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFROMKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFromAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFromReferenceEntitySpecParserRuleCall_2_0 = (RuleCall)cFromAssignment_2.eContents().get(0);
		private final Keyword cTOKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cToAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cToRelationshipSpecParserRuleCall_4_0_0 = (RuleCall)cToAssignment_4_0.eContents().get(0);
		private final Assignment cToAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cToIndirectRelationshipSpecParserRuleCall_4_1_0 = (RuleCall)cToAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Assignment cToAssignment_5_1_0 = (Assignment)cAlternatives_5_1.eContents().get(0);
		private final RuleCall cToRelationshipSpecParserRuleCall_5_1_0_0 = (RuleCall)cToAssignment_5_1_0.eContents().get(0);
		private final Assignment cToAssignment_5_1_1 = (Assignment)cAlternatives_5_1.eContents().get(1);
		private final RuleCall cToIndirectRelationshipSpecParserRuleCall_5_1_1_0 = (RuleCall)cToAssignment_5_1_1.eContents().get(0);
		
		//RelationshipQuery returns RelationshipQuery:
		//    {RelationshipQuery}
		//    'FROM' from=ReferenceEntitySpec
		//    'TO' (to+=RelationshipSpec | => to+=IndirectRelationshipSpec)
		//    (=> ',' (to+=RelationshipSpec | => to+=IndirectRelationshipSpec))*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{RelationshipQuery}
		//'FROM' from=ReferenceEntitySpec
		//'TO' (to+=RelationshipSpec | => to+=IndirectRelationshipSpec)
		//(=> ',' (to+=RelationshipSpec | => to+=IndirectRelationshipSpec))*
		public Group getGroup() { return cGroup; }
		
		//{RelationshipQuery}
		public Action getRelationshipQueryAction_0() { return cRelationshipQueryAction_0; }
		
		//'FROM'
		public Keyword getFROMKeyword_1() { return cFROMKeyword_1; }
		
		//from=ReferenceEntitySpec
		public Assignment getFromAssignment_2() { return cFromAssignment_2; }
		
		//ReferenceEntitySpec
		public RuleCall getFromReferenceEntitySpecParserRuleCall_2_0() { return cFromReferenceEntitySpecParserRuleCall_2_0; }
		
		//'TO'
		public Keyword getTOKeyword_3() { return cTOKeyword_3; }
		
		//(to+=RelationshipSpec | => to+=IndirectRelationshipSpec)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//to+=RelationshipSpec
		public Assignment getToAssignment_4_0() { return cToAssignment_4_0; }
		
		//RelationshipSpec
		public RuleCall getToRelationshipSpecParserRuleCall_4_0_0() { return cToRelationshipSpecParserRuleCall_4_0_0; }
		
		//=> to+=IndirectRelationshipSpec
		public Assignment getToAssignment_4_1() { return cToAssignment_4_1; }
		
		//IndirectRelationshipSpec
		public RuleCall getToIndirectRelationshipSpecParserRuleCall_4_1_0() { return cToIndirectRelationshipSpecParserRuleCall_4_1_0; }
		
		//(=> ',' (to+=RelationshipSpec | => to+=IndirectRelationshipSpec))*
		public Group getGroup_5() { return cGroup_5; }
		
		//=> ','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//(to+=RelationshipSpec | => to+=IndirectRelationshipSpec)
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }
		
		//to+=RelationshipSpec
		public Assignment getToAssignment_5_1_0() { return cToAssignment_5_1_0; }
		
		//RelationshipSpec
		public RuleCall getToRelationshipSpecParserRuleCall_5_1_0_0() { return cToRelationshipSpecParserRuleCall_5_1_0_0; }
		
		//=> to+=IndirectRelationshipSpec
		public Assignment getToAssignment_5_1_1() { return cToAssignment_5_1_1; }
		
		//IndirectRelationshipSpec
		public RuleCall getToIndirectRelationshipSpecParserRuleCall_5_1_1_0() { return cToIndirectRelationshipSpecParserRuleCall_5_1_1_0; }
	}
	public class NestedRelationshipQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.NestedRelationshipQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationshipQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFROMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFromReferenceEntitySpecParserRuleCall_3_0 = (RuleCall)cFromAssignment_3.eContents().get(0);
		private final Keyword cTOKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cToAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cToRelationshipSpecParserRuleCall_5_0_0 = (RuleCall)cToAssignment_5_0.eContents().get(0);
		private final Assignment cToAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cToIndirectRelationshipSpecParserRuleCall_5_1_0 = (RuleCall)cToAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Assignment cToAssignment_6_1_0 = (Assignment)cAlternatives_6_1.eContents().get(0);
		private final RuleCall cToRelationshipSpecParserRuleCall_6_1_0_0 = (RuleCall)cToAssignment_6_1_0.eContents().get(0);
		private final Assignment cToAssignment_6_1_1 = (Assignment)cAlternatives_6_1.eContents().get(1);
		private final RuleCall cToIndirectRelationshipSpecParserRuleCall_6_1_1_0 = (RuleCall)cToAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//NestedRelationshipQuery returns RelationshipQuery:
		//    {RelationshipQuery}
		//    '{'
		//    'FROM'? from=ReferenceEntitySpec
		//    'TO' (to+=RelationshipSpec | => to+=IndirectRelationshipSpec)
		//    (=> ',' (to+=RelationshipSpec | => to+=IndirectRelationshipSpec))*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{RelationshipQuery}
		//'{'
		//'FROM'? from=ReferenceEntitySpec
		//'TO' (to+=RelationshipSpec | => to+=IndirectRelationshipSpec)
		//(=> ',' (to+=RelationshipSpec | => to+=IndirectRelationshipSpec))*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{RelationshipQuery}
		public Action getRelationshipQueryAction_0() { return cRelationshipQueryAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'FROM'?
		public Keyword getFROMKeyword_2() { return cFROMKeyword_2; }
		
		//from=ReferenceEntitySpec
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }
		
		//ReferenceEntitySpec
		public RuleCall getFromReferenceEntitySpecParserRuleCall_3_0() { return cFromReferenceEntitySpecParserRuleCall_3_0; }
		
		//'TO'
		public Keyword getTOKeyword_4() { return cTOKeyword_4; }
		
		//(to+=RelationshipSpec | => to+=IndirectRelationshipSpec)
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//to+=RelationshipSpec
		public Assignment getToAssignment_5_0() { return cToAssignment_5_0; }
		
		//RelationshipSpec
		public RuleCall getToRelationshipSpecParserRuleCall_5_0_0() { return cToRelationshipSpecParserRuleCall_5_0_0; }
		
		//=> to+=IndirectRelationshipSpec
		public Assignment getToAssignment_5_1() { return cToAssignment_5_1; }
		
		//IndirectRelationshipSpec
		public RuleCall getToIndirectRelationshipSpecParserRuleCall_5_1_0() { return cToIndirectRelationshipSpecParserRuleCall_5_1_0; }
		
		//(=> ',' (to+=RelationshipSpec | => to+=IndirectRelationshipSpec))*
		public Group getGroup_6() { return cGroup_6; }
		
		//=> ','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//(to+=RelationshipSpec | => to+=IndirectRelationshipSpec)
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }
		
		//to+=RelationshipSpec
		public Assignment getToAssignment_6_1_0() { return cToAssignment_6_1_0; }
		
		//RelationshipSpec
		public RuleCall getToRelationshipSpecParserRuleCall_6_1_0_0() { return cToRelationshipSpecParserRuleCall_6_1_0_0; }
		
		//=> to+=IndirectRelationshipSpec
		public Assignment getToAssignment_6_1_1() { return cToAssignment_6_1_1; }
		
		//IndirectRelationshipSpec
		public RuleCall getToIndirectRelationshipSpecParserRuleCall_6_1_1_0() { return cToIndirectRelationshipSpecParserRuleCall_6_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class RelationshipSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.RelationshipSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationshipSpecAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTargetExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetExpressionTargetExpressionParserRuleCall_1_0 = (RuleCall)cTargetExpressionAssignment_1.eContents().get(0);
		private final Assignment cRelationSpecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRelationSpecRelationTypeSpecParserRuleCall_2_0 = (RuleCall)cRelationSpecAssignment_2.eContents().get(0);
		
		//RelationshipSpec returns RelationshipSpec:
		//    {RelationshipSpec}
		//    targetExpression=TargetExpression
		//    (=> relationSpec=RelationTypeSpec?)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{RelationshipSpec}
		//targetExpression=TargetExpression
		//(=> relationSpec=RelationTypeSpec?)
		public Group getGroup() { return cGroup; }
		
		//{RelationshipSpec}
		public Action getRelationshipSpecAction_0() { return cRelationshipSpecAction_0; }
		
		//targetExpression=TargetExpression
		public Assignment getTargetExpressionAssignment_1() { return cTargetExpressionAssignment_1; }
		
		//TargetExpression
		public RuleCall getTargetExpressionTargetExpressionParserRuleCall_1_0() { return cTargetExpressionTargetExpressionParserRuleCall_1_0; }
		
		//(=> relationSpec=RelationTypeSpec?)
		public Assignment getRelationSpecAssignment_2() { return cRelationSpecAssignment_2; }
		
		//RelationTypeSpec
		public RuleCall getRelationSpecRelationTypeSpecParserRuleCall_2_0() { return cRelationSpecRelationTypeSpecParserRuleCall_2_0; }
	}
	public class RelationTypeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.RelationTypeSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRelationSpecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceSpecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAggregationSpecParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RelationTypeSpec returns RelationSpec:
		//    RelationSpec | ReferenceSpec | AggregationSpec
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RelationSpec | ReferenceSpec | AggregationSpec
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RelationSpec
		public RuleCall getRelationSpecParserRuleCall_0() { return cRelationSpecParserRuleCall_0; }
		
		//ReferenceSpec
		public RuleCall getReferenceSpecParserRuleCall_1() { return cReferenceSpecParserRuleCall_1; }
		
		//AggregationSpec
		public RuleCall getAggregationSpecParserRuleCall_2() { return cAggregationSpecParserRuleCall_2; }
	}
	public class RelationSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.RelationSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationSpecAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cANYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//RelationSpec returns RelationSpec:
		//    {RelationSpec}
		//    'ANY' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{RelationSpec}
		//'ANY' name=ID
		public Group getGroup() { return cGroup; }
		
		//{RelationSpec}
		public Action getRelationSpecAction_0() { return cRelationSpecAction_0; }
		
		//'ANY'
		public Keyword getANYKeyword_1() { return cANYKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class ReferenceSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.ReferenceSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReferenceSpecAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cREFKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cVariationFilterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariationFilterVariationFilterParserRuleCall_3_0 = (RuleCall)cVariationFilterAssignment_3.eContents().get(0);
		
		//ReferenceSpec returns ReferenceSpec:
		//    {ReferenceSpec}
		//    'REF' (name=ID)? variationFilter=VariationFilter?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ReferenceSpec}
		//'REF' (name=ID)? variationFilter=VariationFilter?
		public Group getGroup() { return cGroup; }
		
		//{ReferenceSpec}
		public Action getReferenceSpecAction_0() { return cReferenceSpecAction_0; }
		
		//'REF'
		public Keyword getREFKeyword_1() { return cREFKeyword_1; }
		
		//(name=ID)?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//variationFilter=VariationFilter?
		public Assignment getVariationFilterAssignment_3() { return cVariationFilterAssignment_3; }
		
		//VariationFilter
		public RuleCall getVariationFilterVariationFilterParserRuleCall_3_0() { return cVariationFilterVariationFilterParserRuleCall_3_0; }
	}
	public class AggregationSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.AggregationSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAggregationSpecAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAGGRKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//AggregationSpec returns AggregationSpec:
		//    {AggregationSpec}
		//    'AGGR' (name=ID)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{AggregationSpec}
		//'AGGR' (name=ID)?
		public Group getGroup() { return cGroup; }
		
		//{AggregationSpec}
		public Action getAggregationSpecAction_0() { return cAggregationSpecAction_0; }
		
		//'AGGR'
		public Keyword getAGGRKeyword_1() { return cAGGRKeyword_1; }
		
		//(name=ID)?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class IndirectRelationshipSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.IndirectRelationshipSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationshipSpecAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIndirectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIndirectGreaterThanSignGreaterThanSignKeyword_1_0 = (Keyword)cIndirectAssignment_1.eContents().get(0);
		private final Assignment cTargetExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTargetExpressionTargetExpressionParserRuleCall_2_0 = (RuleCall)cTargetExpressionAssignment_2.eContents().get(0);
		private final Assignment cRelationSpecAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRelationSpecIndirectRelationTypeSpecParserRuleCall_3_0 = (RuleCall)cRelationSpecAssignment_3.eContents().get(0);
		
		//IndirectRelationshipSpec returns RelationshipSpec:
		//    {RelationshipSpec}
		//    indirect?='>>'
		//    targetExpression=TargetExpression
		//    (=> relationSpec=IndirectRelationTypeSpec?)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{RelationshipSpec}
		//indirect?='>>'
		//targetExpression=TargetExpression
		//(=> relationSpec=IndirectRelationTypeSpec?)
		public Group getGroup() { return cGroup; }
		
		//{RelationshipSpec}
		public Action getRelationshipSpecAction_0() { return cRelationshipSpecAction_0; }
		
		//indirect?='>>'
		public Assignment getIndirectAssignment_1() { return cIndirectAssignment_1; }
		
		//'>>'
		public Keyword getIndirectGreaterThanSignGreaterThanSignKeyword_1_0() { return cIndirectGreaterThanSignGreaterThanSignKeyword_1_0; }
		
		//targetExpression=TargetExpression
		public Assignment getTargetExpressionAssignment_2() { return cTargetExpressionAssignment_2; }
		
		//TargetExpression
		public RuleCall getTargetExpressionTargetExpressionParserRuleCall_2_0() { return cTargetExpressionTargetExpressionParserRuleCall_2_0; }
		
		//(=> relationSpec=IndirectRelationTypeSpec?)
		public Assignment getRelationSpecAssignment_3() { return cRelationSpecAssignment_3; }
		
		//IndirectRelationTypeSpec
		public RuleCall getRelationSpecIndirectRelationTypeSpecParserRuleCall_3_0() { return cRelationSpecIndirectRelationTypeSpecParserRuleCall_3_0; }
	}
	public class IndirectRelationTypeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.IndirectRelationTypeSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIndirectReferenceSpecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIndirectAggregationSpecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IndirectRelationTypeSpec returns RelationSpec:
		//    IndirectReferenceSpec | IndirectAggregationSpec
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//IndirectReferenceSpec | IndirectAggregationSpec
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IndirectReferenceSpec
		public RuleCall getIndirectReferenceSpecParserRuleCall_0() { return cIndirectReferenceSpecParserRuleCall_0; }
		
		//IndirectAggregationSpec
		public RuleCall getIndirectAggregationSpecParserRuleCall_1() { return cIndirectAggregationSpecParserRuleCall_1; }
	}
	public class IndirectReferenceSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.IndirectReferenceSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReferenceSpecAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cREFKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IndirectReferenceSpec returns ReferenceSpec:
		//    {ReferenceSpec}
		//    'REF'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ReferenceSpec}
		//'REF'
		public Group getGroup() { return cGroup; }
		
		//{ReferenceSpec}
		public Action getReferenceSpecAction_0() { return cReferenceSpecAction_0; }
		
		//'REF'
		public Keyword getREFKeyword_1() { return cREFKeyword_1; }
	}
	public class IndirectAggregationSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.IndirectAggregationSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAggregationSpecAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAGGRKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IndirectAggregationSpec returns AggregationSpec:
		//    {AggregationSpec}
		//    'AGGR'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{AggregationSpec}
		//'AGGR'
		public Group getGroup() { return cGroup; }
		
		//{AggregationSpec}
		public Action getAggregationSpecAction_0() { return cAggregationSpecAction_0; }
		
		//'AGGR'
		public Keyword getAGGRKeyword_1() { return cAGGRKeyword_1; }
	}
	public class TargetExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.TargetExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRelationshipExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TargetExpression returns TargetExpression:
		//    RelationshipExpression | EntityExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RelationshipExpression | EntityExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RelationshipExpression
		public RuleCall getRelationshipExpressionParserRuleCall_0() { return cRelationshipExpressionParserRuleCall_0; }
		
		//EntityExpression
		public RuleCall getEntityExpressionParserRuleCall_1() { return cEntityExpressionParserRuleCall_1; }
	}
	public class RelationshipExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.RelationshipExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationshipExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRelationshipQueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelationshipQueryNestedRelationshipQueryParserRuleCall_1_0 = (RuleCall)cRelationshipQueryAssignment_1.eContents().get(0);
		
		//RelationshipExpression returns RelationshipExpression:
		//    {RelationshipExpression}
		//    relationshipQuery=NestedRelationshipQuery
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{RelationshipExpression}
		//relationshipQuery=NestedRelationshipQuery
		public Group getGroup() { return cGroup; }
		
		//{RelationshipExpression}
		public Action getRelationshipExpressionAction_0() { return cRelationshipExpressionAction_0; }
		
		//relationshipQuery=NestedRelationshipQuery
		public Assignment getRelationshipQueryAssignment_1() { return cRelationshipQueryAssignment_1; }
		
		//NestedRelationshipQuery
		public RuleCall getRelationshipQueryNestedRelationshipQueryParserRuleCall_1_0() { return cRelationshipQueryNestedRelationshipQueryParserRuleCall_1_0; }
	}
	public class EntityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.EntityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntityExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEntitySpecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntitySpecToReferenceEntitySpecParserRuleCall_1_0 = (RuleCall)cEntitySpecAssignment_1.eContents().get(0);
		
		//EntityExpression returns EntityExpression:
		//    {EntityExpression}
		//    entitySpec=ToReferenceEntitySpec
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{EntityExpression}
		//entitySpec=ToReferenceEntitySpec
		public Group getGroup() { return cGroup; }
		
		//{EntityExpression}
		public Action getEntityExpressionAction_0() { return cEntityExpressionAction_0; }
		
		//entitySpec=ToReferenceEntitySpec
		public Assignment getEntitySpecAssignment_1() { return cEntitySpecAssignment_1; }
		
		//ToReferenceEntitySpec
		public RuleCall getEntitySpecToReferenceEntitySpecParserRuleCall_1_0() { return cEntitySpecToReferenceEntitySpecParserRuleCall_1_0; }
	}
	public class ToReferenceEntitySpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.ToReferenceEntitySpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntitySpecAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameAsteriskKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Keyword cName_Keyword_1_0_2 = (Keyword)cNameAlternatives_1_0.eContents().get(2);
		private final Assignment cVariationFilterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariationFilterReferenceVariationFilterParserRuleCall_2_0 = (RuleCall)cVariationFilterAssignment_2.eContents().get(0);
		
		//ToReferenceEntitySpec returns EntitySpec:
		//    {EntitySpec}
		//    name=(ID | '*' | '_') variationFilter=ReferenceVariationFilter?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{EntitySpec}
		//name=(ID | '*' | '_') variationFilter=ReferenceVariationFilter?
		public Group getGroup() { return cGroup; }
		
		//{EntitySpec}
		public Action getEntitySpecAction_0() { return cEntitySpecAction_0; }
		
		//name=(ID | '*' | '_')
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(ID | '*' | '_')
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//'*'
		public Keyword getNameAsteriskKeyword_1_0_1() { return cNameAsteriskKeyword_1_0_1; }
		
		//'_'
		public Keyword getName_Keyword_1_0_2() { return cName_Keyword_1_0_2; }
		
		//variationFilter=ReferenceVariationFilter?
		public Assignment getVariationFilterAssignment_2() { return cVariationFilterAssignment_2; }
		
		//ReferenceVariationFilter
		public RuleCall getVariationFilterReferenceVariationFilterParserRuleCall_2_0() { return cVariationFilterReferenceVariationFilterParserRuleCall_2_0; }
	}
	public class ReferenceVariationFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.ReferenceVariationFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariationFilterAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cPropertySpecsAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cPropertySpecsReferencePropertySpecParserRuleCall_1_1_1_0_0 = (RuleCall)cPropertySpecsAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cPropertySpecsAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cPropertySpecsReferencePropertySpecParserRuleCall_1_1_1_1_1_0 = (RuleCall)cPropertySpecsAssignment_1_1_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//ReferenceVariationFilter returns VariationFilter:
		//    {VariationFilter}
		//    ('[]' | '[' (propertySpecs+=ReferencePropertySpec (',' propertySpecs+=ReferencePropertySpec)*)? ']')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{VariationFilter}
		//('[]' | '[' (propertySpecs+=ReferencePropertySpec (',' propertySpecs+=ReferencePropertySpec)*)? ']')
		public Group getGroup() { return cGroup; }
		
		//{VariationFilter}
		public Action getVariationFilterAction_0() { return cVariationFilterAction_0; }
		
		//('[]' | '[' (propertySpecs+=ReferencePropertySpec (',' propertySpecs+=ReferencePropertySpec)*)? ']')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'[]'
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1_0() { return cLeftSquareBracketRightSquareBracketKeyword_1_0; }
		
		//'[' (propertySpecs+=ReferencePropertySpec (',' propertySpecs+=ReferencePropertySpec)*)? ']'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }
		
		//(propertySpecs+=ReferencePropertySpec (',' propertySpecs+=ReferencePropertySpec)*)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//propertySpecs+=ReferencePropertySpec
		public Assignment getPropertySpecsAssignment_1_1_1_0() { return cPropertySpecsAssignment_1_1_1_0; }
		
		//ReferencePropertySpec
		public RuleCall getPropertySpecsReferencePropertySpecParserRuleCall_1_1_1_0_0() { return cPropertySpecsReferencePropertySpecParserRuleCall_1_1_1_0_0; }
		
		//(',' propertySpecs+=ReferencePropertySpec)*
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_1_0() { return cCommaKeyword_1_1_1_1_0; }
		
		//propertySpecs+=ReferencePropertySpec
		public Assignment getPropertySpecsAssignment_1_1_1_1_1() { return cPropertySpecsAssignment_1_1_1_1_1; }
		
		//ReferencePropertySpec
		public RuleCall getPropertySpecsReferencePropertySpecParserRuleCall_1_1_1_1_1_0() { return cPropertySpecsReferencePropertySpecParserRuleCall_1_1_1_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_2() { return cRightSquareBracketKeyword_1_1_2; }
	}
	public class ReferencePropertySpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.ReferencePropertySpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertySpecAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameAsteriskKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypePrimitiveTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		
		//ReferencePropertySpec returns PropertySpec:
		//    {PropertySpec}
		//    name=(ID|'*') (':' type=PrimitiveType)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{PropertySpec}
		//name=(ID|'*') (':' type=PrimitiveType)?
		public Group getGroup() { return cGroup; }
		
		//{PropertySpec}
		public Action getPropertySpecAction_0() { return cPropertySpecAction_0; }
		
		//name=(ID|'*')
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(ID|'*')
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//'*'
		public Keyword getNameAsteriskKeyword_1_0_1() { return cNameAsteriskKeyword_1_0_1; }
		
		//(':' type=PrimitiveType)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//type=PrimitiveType
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//PrimitiveType
		public RuleCall getTypePrimitiveTypeParserRuleCall_2_1_0() { return cTypePrimitiveTypeParserRuleCall_2_1_0; }
	}
	public class VariationFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.VariationFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariationFilterAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cPropertySpecsAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cPropertySpecsPropertySpecParserRuleCall_1_1_1_0_0 = (RuleCall)cPropertySpecsAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cPropertySpecsAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cPropertySpecsPropertySpecParserRuleCall_1_1_1_1_1_0 = (RuleCall)cPropertySpecsAssignment_1_1_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cOnlyAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final Keyword cOnlyONLYKeyword_1_1_3_0 = (Keyword)cOnlyAssignment_1_1_3.eContents().get(0);
		
		//VariationFilter returns VariationFilter:
		//    {VariationFilter}
		//    ('[]' | '[' (propertySpecs+=PropertySpec (',' propertySpecs+=PropertySpec)*)? ']' (only?='ONLY')?)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{VariationFilter}
		//('[]' | '[' (propertySpecs+=PropertySpec (',' propertySpecs+=PropertySpec)*)? ']' (only?='ONLY')?)
		public Group getGroup() { return cGroup; }
		
		//{VariationFilter}
		public Action getVariationFilterAction_0() { return cVariationFilterAction_0; }
		
		//('[]' | '[' (propertySpecs+=PropertySpec (',' propertySpecs+=PropertySpec)*)? ']' (only?='ONLY')?)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'[]'
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1_0() { return cLeftSquareBracketRightSquareBracketKeyword_1_0; }
		
		//'[' (propertySpecs+=PropertySpec (',' propertySpecs+=PropertySpec)*)? ']' (only?='ONLY')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }
		
		//(propertySpecs+=PropertySpec (',' propertySpecs+=PropertySpec)*)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//propertySpecs+=PropertySpec
		public Assignment getPropertySpecsAssignment_1_1_1_0() { return cPropertySpecsAssignment_1_1_1_0; }
		
		//PropertySpec
		public RuleCall getPropertySpecsPropertySpecParserRuleCall_1_1_1_0_0() { return cPropertySpecsPropertySpecParserRuleCall_1_1_1_0_0; }
		
		//(',' propertySpecs+=PropertySpec)*
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_1_0() { return cCommaKeyword_1_1_1_1_0; }
		
		//propertySpecs+=PropertySpec
		public Assignment getPropertySpecsAssignment_1_1_1_1_1() { return cPropertySpecsAssignment_1_1_1_1_1; }
		
		//PropertySpec
		public RuleCall getPropertySpecsPropertySpecParserRuleCall_1_1_1_1_1_0() { return cPropertySpecsPropertySpecParserRuleCall_1_1_1_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_2() { return cRightSquareBracketKeyword_1_1_2; }
		
		//(only?='ONLY')?
		public Assignment getOnlyAssignment_1_1_3() { return cOnlyAssignment_1_1_3; }
		
		//'ONLY'
		public Keyword getOnlyONLYKeyword_1_1_3_0() { return cOnlyONLYKeyword_1_1_3_0; }
	}
	public class PropertySpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.PropertySpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertySpecAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final Keyword cNameAsteriskKeyword_1_0_1 = (Keyword)cNameAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		
		//PropertySpec returns PropertySpec:
		//    {PropertySpec}
		//    name=(ID|'*') (':' type=Type)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{PropertySpec}
		//name=(ID|'*') (':' type=Type)?
		public Group getGroup() { return cGroup; }
		
		//{PropertySpec}
		public Action getPropertySpecAction_0() { return cPropertySpecAction_0; }
		
		//name=(ID|'*')
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//(ID|'*')
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//'*'
		public Keyword getNameAsteriskKeyword_1_0_1() { return cNameAsteriskKeyword_1_0_1; }
		
		//(':' type=Type)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//type=Type
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_1_0() { return cTypeTypeParserRuleCall_2_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationshipTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type returns Type:
		//    PrimitiveType | RelationshipType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveType | RelationshipType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_0() { return cPrimitiveTypeParserRuleCall_0; }
		
		//RelationshipType
		public RuleCall getRelationshipTypeParserRuleCall_1() { return cRelationshipTypeParserRuleCall_1; }
	}
	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.PrimitiveType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimitiveTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeEnumEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cArrayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cArrayLeftSquareBracketRightSquareBracketKeyword_2_0 = (Keyword)cArrayAssignment_2.eContents().get(0);
		
		//PrimitiveType returns PrimitiveType:
		//    {PrimitiveType}
		//    type=TypeEnum (array?='[]')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimitiveType}
		//type=TypeEnum (array?='[]')?
		public Group getGroup() { return cGroup; }
		
		//{PrimitiveType}
		public Action getPrimitiveTypeAction_0() { return cPrimitiveTypeAction_0; }
		
		//type=TypeEnum
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//TypeEnum
		public RuleCall getTypeTypeEnumEnumRuleCall_1_0() { return cTypeTypeEnumEnumRuleCall_1_0; }
		
		//(array?='[]')?
		public Assignment getArrayAssignment_2() { return cArrayAssignment_2; }
		
		//'[]'
		public Keyword getArrayLeftSquareBracketRightSquareBracketKeyword_2_0() { return cArrayLeftSquareBracketRightSquareBracketKeyword_2_0; }
	}
	public class RelationshipTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.RelationshipType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationshipTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRelationTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelationTypeRelationshipTypeEnumEnumRuleCall_1_0 = (RuleCall)cRelationTypeAssignment_1.eContents().get(0);
		private final Assignment cTargetEntityNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTargetEntityNameAlternatives_2_0 = (Alternatives)cTargetEntityNameAssignment_2.eContents().get(0);
		private final RuleCall cTargetEntityNameIDTerminalRuleCall_2_0_0 = (RuleCall)cTargetEntityNameAlternatives_2_0.eContents().get(0);
		private final Keyword cTargetEntityNameAsteriskKeyword_2_0_1 = (Keyword)cTargetEntityNameAlternatives_2_0.eContents().get(1);
		
		//RelationshipType returns RelationshipType:
		//    {RelationshipType}
		//    relationType=RelationshipTypeEnum targetEntityName=(ID|'*')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{RelationshipType}
		//relationType=RelationshipTypeEnum targetEntityName=(ID|'*')?
		public Group getGroup() { return cGroup; }
		
		//{RelationshipType}
		public Action getRelationshipTypeAction_0() { return cRelationshipTypeAction_0; }
		
		//relationType=RelationshipTypeEnum
		public Assignment getRelationTypeAssignment_1() { return cRelationTypeAssignment_1; }
		
		//RelationshipTypeEnum
		public RuleCall getRelationTypeRelationshipTypeEnumEnumRuleCall_1_0() { return cRelationTypeRelationshipTypeEnumEnumRuleCall_1_0; }
		
		//targetEntityName=(ID|'*')?
		public Assignment getTargetEntityNameAssignment_2() { return cTargetEntityNameAssignment_2; }
		
		//(ID|'*')
		public Alternatives getTargetEntityNameAlternatives_2_0() { return cTargetEntityNameAlternatives_2_0; }
		
		//ID
		public RuleCall getTargetEntityNameIDTerminalRuleCall_2_0_0() { return cTargetEntityNameIDTerminalRuleCall_2_0_0; }
		
		//'*'
		public Keyword getTargetEntityNameAsteriskKeyword_2_0_1() { return cTargetEntityNameAsteriskKeyword_2_0_1; }
	}
	public class VersionHistoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.VersionHistory");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBeforeHistoryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAfterHistoryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBetweenHistoryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//VersionHistory returns VersionHistoryOperation:
		//    BeforeHistory | AfterHistory | BetweenHistory
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BeforeHistory | AfterHistory | BetweenHistory
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BeforeHistory
		public RuleCall getBeforeHistoryParserRuleCall_0() { return cBeforeHistoryParserRuleCall_0; }
		
		//AfterHistory
		public RuleCall getAfterHistoryParserRuleCall_1() { return cAfterHistoryParserRuleCall_1; }
		
		//BetweenHistory
		public RuleCall getBetweenHistoryParserRuleCall_2() { return cBetweenHistoryParserRuleCall_2; }
	}
	public class BeforeHistoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.BeforeHistory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBeforeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBEFOREKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDateTimeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDateTimeDateTimeParserRuleCall_3_0 = (RuleCall)cDateTimeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BeforeHistory returns Before:
		//    {Before}
		//    'BEFORE' '(' dateTime=DateTime ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Before}
		//'BEFORE' '(' dateTime=DateTime ')'
		public Group getGroup() { return cGroup; }
		
		//{Before}
		public Action getBeforeAction_0() { return cBeforeAction_0; }
		
		//'BEFORE'
		public Keyword getBEFOREKeyword_1() { return cBEFOREKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//dateTime=DateTime
		public Assignment getDateTimeAssignment_3() { return cDateTimeAssignment_3; }
		
		//DateTime
		public RuleCall getDateTimeDateTimeParserRuleCall_3_0() { return cDateTimeDateTimeParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AfterHistoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.AfterHistory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAfterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAFTERKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDateTimeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDateTimeDateTimeParserRuleCall_3_0 = (RuleCall)cDateTimeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AfterHistory returns After:
		//    {After}
		//    'AFTER' '(' dateTime=DateTime ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{After}
		//'AFTER' '(' dateTime=DateTime ')'
		public Group getGroup() { return cGroup; }
		
		//{After}
		public Action getAfterAction_0() { return cAfterAction_0; }
		
		//'AFTER'
		public Keyword getAFTERKeyword_1() { return cAFTERKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//dateTime=DateTime
		public Assignment getDateTimeAssignment_3() { return cDateTimeAssignment_3; }
		
		//DateTime
		public RuleCall getDateTimeDateTimeParserRuleCall_3_0() { return cDateTimeDateTimeParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class BetweenHistoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.BetweenHistory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBetweenAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBETWEENKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAfterDateTimeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAfterDateTimeDateTimeParserRuleCall_3_0 = (RuleCall)cAfterDateTimeAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBeforeDateTimeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBeforeDateTimeDateTimeParserRuleCall_5_0 = (RuleCall)cBeforeDateTimeAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BetweenHistory returns Between:
		//    {Between}
		//    'BETWEEN' '(' afterDateTime=DateTime ',' beforeDateTime=DateTime ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Between}
		//'BETWEEN' '(' afterDateTime=DateTime ',' beforeDateTime=DateTime ')'
		public Group getGroup() { return cGroup; }
		
		//{Between}
		public Action getBetweenAction_0() { return cBetweenAction_0; }
		
		//'BETWEEN'
		public Keyword getBETWEENKeyword_1() { return cBETWEENKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//afterDateTime=DateTime
		public Assignment getAfterDateTimeAssignment_3() { return cAfterDateTimeAssignment_3; }
		
		//DateTime
		public RuleCall getAfterDateTimeDateTimeParserRuleCall_3_0() { return cAfterDateTimeDateTimeParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//beforeDateTime=DateTime
		public Assignment getBeforeDateTimeAssignment_5() { return cBeforeDateTimeAssignment_5; }
		
		//DateTime
		public RuleCall getBeforeDateTimeDateTimeParserRuleCall_5_0() { return cBeforeDateTimeDateTimeParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class DateTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.DateTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDateTimeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cYearAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cYearINTTerminalRuleCall_1_0 = (RuleCall)cYearAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMonthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMonthINTTerminalRuleCall_3_0 = (RuleCall)cMonthAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDayAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDayINTTerminalRuleCall_5_0 = (RuleCall)cDayAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cHourAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cHourINTTerminalRuleCall_6_0_0 = (RuleCall)cHourAssignment_6_0.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cMinutesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cMinutesINTTerminalRuleCall_6_2_0 = (RuleCall)cMinutesAssignment_6_2.eContents().get(0);
		private final Keyword cColonKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cSecondsAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cSecondsINTTerminalRuleCall_6_4_0 = (RuleCall)cSecondsAssignment_6_4.eContents().get(0);
		
		//DateTime returns DateTime:
		//    {DateTime}
		//    (year=INT) '-' (month=INT) '-' (day=INT) (hour=INT ':' minutes=INT ':' seconds=INT)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{DateTime}
		//(year=INT) '-' (month=INT) '-' (day=INT) (hour=INT ':' minutes=INT ':' seconds=INT)?
		public Group getGroup() { return cGroup; }
		
		//{DateTime}
		public Action getDateTimeAction_0() { return cDateTimeAction_0; }
		
		//(year=INT)
		public Assignment getYearAssignment_1() { return cYearAssignment_1; }
		
		//INT
		public RuleCall getYearINTTerminalRuleCall_1_0() { return cYearINTTerminalRuleCall_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//(month=INT)
		public Assignment getMonthAssignment_3() { return cMonthAssignment_3; }
		
		//INT
		public RuleCall getMonthINTTerminalRuleCall_3_0() { return cMonthINTTerminalRuleCall_3_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_4() { return cHyphenMinusKeyword_4; }
		
		//(day=INT)
		public Assignment getDayAssignment_5() { return cDayAssignment_5; }
		
		//INT
		public RuleCall getDayINTTerminalRuleCall_5_0() { return cDayINTTerminalRuleCall_5_0; }
		
		//(hour=INT ':' minutes=INT ':' seconds=INT)?
		public Group getGroup_6() { return cGroup_6; }
		
		//hour=INT
		public Assignment getHourAssignment_6_0() { return cHourAssignment_6_0; }
		
		//INT
		public RuleCall getHourINTTerminalRuleCall_6_0_0() { return cHourINTTerminalRuleCall_6_0_0; }
		
		//':'
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }
		
		//minutes=INT
		public Assignment getMinutesAssignment_6_2() { return cMinutesAssignment_6_2; }
		
		//INT
		public RuleCall getMinutesINTTerminalRuleCall_6_2_0() { return cMinutesINTTerminalRuleCall_6_2_0; }
		
		//':'
		public Keyword getColonKeyword_6_3() { return cColonKeyword_6_3; }
		
		//seconds=INT
		public Assignment getSecondsAssignment_6_4() { return cSecondsAssignment_6_4; }
		
		//INT
		public RuleCall getSecondsINTTerminalRuleCall_6_4_0() { return cSecondsINTTerminalRuleCall_6_4_0; }
	}
	
	public class TypeEnumElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.TypeEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTRINGStringKeyword_0_0 = (Keyword)cSTRINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNUMBEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNUMBERNumberKeyword_1_0 = (Keyword)cNUMBEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBOOLEANBooleanKeyword_2_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TypeEnum returns TypeEnum:
		//    STRING='string' | NUMBER='number' | BOOLEAN='boolean'
		//;
		public EnumRule getRule() { return rule; }
		
		//STRING='string' | NUMBER='number' | BOOLEAN='boolean'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING='string'
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_0() { return cSTRINGEnumLiteralDeclaration_0; }
		
		//'string'
		public Keyword getSTRINGStringKeyword_0_0() { return cSTRINGStringKeyword_0_0; }
		
		//NUMBER='number'
		public EnumLiteralDeclaration getNUMBEREnumLiteralDeclaration_1() { return cNUMBEREnumLiteralDeclaration_1; }
		
		//'number'
		public Keyword getNUMBERNumberKeyword_1_0() { return cNUMBERNumberKeyword_1_0; }
		
		//BOOLEAN='boolean'
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_2() { return cBOOLEANEnumLiteralDeclaration_2; }
		
		//'boolean'
		public Keyword getBOOLEANBooleanKeyword_2_0() { return cBOOLEANBooleanKeyword_2_0; }
	}
	public class RelationshipTypeEnumElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.RelationshipTypeEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRELATIONSHIPEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRELATIONSHIPANYKeyword_0_0 = (Keyword)cRELATIONSHIPEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cREFERENCEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cREFERENCEREFKeyword_1_0 = (Keyword)cREFERENCEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAGGREGATIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAGGREGATIONAGGRKeyword_2_0 = (Keyword)cAGGREGATIONEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum RelationshipTypeEnum returns RelationshipTypeEnum:
		//    RELATIONSHIP='ANY' | REFERENCE='REF' | AGGREGATION='AGGR'
		//;
		public EnumRule getRule() { return rule; }
		
		//RELATIONSHIP='ANY' | REFERENCE='REF' | AGGREGATION='AGGR'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RELATIONSHIP='ANY'
		public EnumLiteralDeclaration getRELATIONSHIPEnumLiteralDeclaration_0() { return cRELATIONSHIPEnumLiteralDeclaration_0; }
		
		//'ANY'
		public Keyword getRELATIONSHIPANYKeyword_0_0() { return cRELATIONSHIPANYKeyword_0_0; }
		
		//REFERENCE='REF'
		public EnumLiteralDeclaration getREFERENCEEnumLiteralDeclaration_1() { return cREFERENCEEnumLiteralDeclaration_1; }
		
		//'REF'
		public Keyword getREFERENCEREFKeyword_1_0() { return cREFERENCEREFKeyword_1_0; }
		
		//AGGREGATION='AGGR'
		public EnumLiteralDeclaration getAGGREGATIONEnumLiteralDeclaration_2() { return cAGGREGATIONEnumLiteralDeclaration_2; }
		
		//'AGGR'
		public Keyword getAGGREGATIONAGGRKeyword_2_0() { return cAGGREGATIONAGGRKeyword_2_0; }
	}
	
	private final SkiQLModelElements pSkiQLModel;
	private final QueryElements pQuery;
	private final EntityTypeQueryElements pEntityTypeQuery;
	private final RelationshipTypeQueryElements pRelationshipTypeQuery;
	private final AnyQueryElements pAnyQuery;
	private final OperationElements pOperation;
	private final KeysSpecElements pKeysSpec;
	private final RelationshipTypeSpecElements pRelationshipTypeSpec;
	private final SchemaTypeSpecElements pSchemaTypeSpec;
	private final EntitySpecElements pEntitySpec;
	private final ReferenceEntitySpecElements pReferenceEntitySpec;
	private final RelationshipQueryElements pRelationshipQuery;
	private final NestedRelationshipQueryElements pNestedRelationshipQuery;
	private final RelationshipSpecElements pRelationshipSpec;
	private final RelationTypeSpecElements pRelationTypeSpec;
	private final RelationSpecElements pRelationSpec;
	private final ReferenceSpecElements pReferenceSpec;
	private final AggregationSpecElements pAggregationSpec;
	private final IndirectRelationshipSpecElements pIndirectRelationshipSpec;
	private final IndirectRelationTypeSpecElements pIndirectRelationTypeSpec;
	private final IndirectReferenceSpecElements pIndirectReferenceSpec;
	private final IndirectAggregationSpecElements pIndirectAggregationSpec;
	private final TargetExpressionElements pTargetExpression;
	private final RelationshipExpressionElements pRelationshipExpression;
	private final EntityExpressionElements pEntityExpression;
	private final ToReferenceEntitySpecElements pToReferenceEntitySpec;
	private final ReferenceVariationFilterElements pReferenceVariationFilter;
	private final ReferencePropertySpecElements pReferencePropertySpec;
	private final VariationFilterElements pVariationFilter;
	private final PropertySpecElements pPropertySpec;
	private final TypeElements pType;
	private final PrimitiveTypeElements pPrimitiveType;
	private final TypeEnumElements eTypeEnum;
	private final RelationshipTypeElements pRelationshipType;
	private final RelationshipTypeEnumElements eRelationshipTypeEnum;
	private final VersionHistoryElements pVersionHistory;
	private final BeforeHistoryElements pBeforeHistory;
	private final AfterHistoryElements pAfterHistory;
	private final BetweenHistoryElements pBetweenHistory;
	private final DateTimeElements pDateTime;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SkiqlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSkiQLModel = new SkiQLModelElements();
		this.pQuery = new QueryElements();
		this.pEntityTypeQuery = new EntityTypeQueryElements();
		this.pRelationshipTypeQuery = new RelationshipTypeQueryElements();
		this.pAnyQuery = new AnyQueryElements();
		this.pOperation = new OperationElements();
		this.pKeysSpec = new KeysSpecElements();
		this.pRelationshipTypeSpec = new RelationshipTypeSpecElements();
		this.pSchemaTypeSpec = new SchemaTypeSpecElements();
		this.pEntitySpec = new EntitySpecElements();
		this.pReferenceEntitySpec = new ReferenceEntitySpecElements();
		this.pRelationshipQuery = new RelationshipQueryElements();
		this.pNestedRelationshipQuery = new NestedRelationshipQueryElements();
		this.pRelationshipSpec = new RelationshipSpecElements();
		this.pRelationTypeSpec = new RelationTypeSpecElements();
		this.pRelationSpec = new RelationSpecElements();
		this.pReferenceSpec = new ReferenceSpecElements();
		this.pAggregationSpec = new AggregationSpecElements();
		this.pIndirectRelationshipSpec = new IndirectRelationshipSpecElements();
		this.pIndirectRelationTypeSpec = new IndirectRelationTypeSpecElements();
		this.pIndirectReferenceSpec = new IndirectReferenceSpecElements();
		this.pIndirectAggregationSpec = new IndirectAggregationSpecElements();
		this.pTargetExpression = new TargetExpressionElements();
		this.pRelationshipExpression = new RelationshipExpressionElements();
		this.pEntityExpression = new EntityExpressionElements();
		this.pToReferenceEntitySpec = new ToReferenceEntitySpecElements();
		this.pReferenceVariationFilter = new ReferenceVariationFilterElements();
		this.pReferencePropertySpec = new ReferencePropertySpecElements();
		this.pVariationFilter = new VariationFilterElements();
		this.pPropertySpec = new PropertySpecElements();
		this.pType = new TypeElements();
		this.pPrimitiveType = new PrimitiveTypeElements();
		this.eTypeEnum = new TypeEnumElements();
		this.pRelationshipType = new RelationshipTypeElements();
		this.eRelationshipTypeEnum = new RelationshipTypeEnumElements();
		this.pVersionHistory = new VersionHistoryElements();
		this.pBeforeHistory = new BeforeHistoryElements();
		this.pAfterHistory = new AfterHistoryElements();
		this.pBetweenHistory = new BetweenHistoryElements();
		this.pDateTime = new DateTimeElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.uschema.xtext.skiql.Skiql.INT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("es.um.uschema.xtext.skiql.Skiql".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SkiQLModel returns SkiQLModel:
	//    {SkiQLModel}
	//    query=Query
	//;
	public SkiQLModelElements getSkiQLModelAccess() {
		return pSkiQLModel;
	}
	
	public ParserRule getSkiQLModelRule() {
		return getSkiQLModelAccess().getRule();
	}
	
	//Query returns Query:
	//    EntityTypeQuery | RelationshipTypeQuery | RelationshipQuery | AnyQuery
	//;
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	//EntityTypeQuery returns SchemaQuery:
	//    {SchemaQuery}
	//    'ENTITY' schemaSpec=EntitySpec
	//    (
	//         (operation=Operation)
	//    )?
	//;
	public EntityTypeQueryElements getEntityTypeQueryAccess() {
		return pEntityTypeQuery;
	}
	
	public ParserRule getEntityTypeQueryRule() {
		return getEntityTypeQueryAccess().getRule();
	}
	
	//RelationshipTypeQuery returns SchemaQuery:
	//    {SchemaQuery}
	//    'REL' schemaSpec=RelationshipTypeSpec
	//    (
	//         (operation=Operation)
	//    )?
	//;
	public RelationshipTypeQueryElements getRelationshipTypeQueryAccess() {
		return pRelationshipTypeQuery;
	}
	
	public ParserRule getRelationshipTypeQueryRule() {
		return getRelationshipTypeQueryAccess().getRule();
	}
	
	//AnyQuery returns SchemaQuery:
	//    {SchemaQuery}
	//    'ANY' schemaSpec=SchemaTypeSpec
	//    (
	//         (operation=Operation)
	//    )?
	//;
	public AnyQueryElements getAnyQueryAccess() {
		return pAnyQuery;
	}
	
	public ParserRule getAnyQueryRule() {
		return getAnyQueryAccess().getRule();
	}
	
	//Operation returns Operation:
	//    KeysSpec | VersionHistory
	//;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//KeysSpec returns KeysSpec:
	//    {KeysSpec}
	//    'KEYS'
	//;
	public KeysSpecElements getKeysSpecAccess() {
		return pKeysSpec;
	}
	
	public ParserRule getKeysSpecRule() {
		return getKeysSpecAccess().getRule();
	}
	
	//RelationshipTypeSpec returns RelationshipTypeSpec:
	//    {RelationshipTypeSpec}
	//    name=(ID | '*') variationFilter=VariationFilter?
	//;
	public RelationshipTypeSpecElements getRelationshipTypeSpecAccess() {
		return pRelationshipTypeSpec;
	}
	
	public ParserRule getRelationshipTypeSpecRule() {
		return getRelationshipTypeSpecAccess().getRule();
	}
	
	//SchemaTypeSpec returns SchemaSpec:
	//    {SchemaSpec}
	//    name=(ID | '*') variationFilter=VariationFilter?
	//;
	public SchemaTypeSpecElements getSchemaTypeSpecAccess() {
		return pSchemaTypeSpec;
	}
	
	public ParserRule getSchemaTypeSpecRule() {
		return getSchemaTypeSpecAccess().getRule();
	}
	
	//EntitySpec returns EntitySpec:
	//    {EntitySpec}
	//    name=(ID | '*') variationFilter=VariationFilter?
	//;
	public EntitySpecElements getEntitySpecAccess() {
		return pEntitySpec;
	}
	
	public ParserRule getEntitySpecRule() {
		return getEntitySpecAccess().getRule();
	}
	
	//ReferenceEntitySpec returns EntitySpec:
	//    {EntitySpec}
	//    name=(ID | '*' | '_') variationFilter=ReferenceVariationFilter?
	//;
	public ReferenceEntitySpecElements getReferenceEntitySpecAccess() {
		return pReferenceEntitySpec;
	}
	
	public ParserRule getReferenceEntitySpecRule() {
		return getReferenceEntitySpecAccess().getRule();
	}
	
	//RelationshipQuery returns RelationshipQuery:
	//    {RelationshipQuery}
	//    'FROM' from=ReferenceEntitySpec
	//    'TO' (to+=RelationshipSpec | => to+=IndirectRelationshipSpec)
	//    (=> ',' (to+=RelationshipSpec | => to+=IndirectRelationshipSpec))*
	//;
	public RelationshipQueryElements getRelationshipQueryAccess() {
		return pRelationshipQuery;
	}
	
	public ParserRule getRelationshipQueryRule() {
		return getRelationshipQueryAccess().getRule();
	}
	
	//NestedRelationshipQuery returns RelationshipQuery:
	//    {RelationshipQuery}
	//    '{'
	//    'FROM'? from=ReferenceEntitySpec
	//    'TO' (to+=RelationshipSpec | => to+=IndirectRelationshipSpec)
	//    (=> ',' (to+=RelationshipSpec | => to+=IndirectRelationshipSpec))*
	//    '}'
	//;
	public NestedRelationshipQueryElements getNestedRelationshipQueryAccess() {
		return pNestedRelationshipQuery;
	}
	
	public ParserRule getNestedRelationshipQueryRule() {
		return getNestedRelationshipQueryAccess().getRule();
	}
	
	//RelationshipSpec returns RelationshipSpec:
	//    {RelationshipSpec}
	//    targetExpression=TargetExpression
	//    (=> relationSpec=RelationTypeSpec?)
	//;
	public RelationshipSpecElements getRelationshipSpecAccess() {
		return pRelationshipSpec;
	}
	
	public ParserRule getRelationshipSpecRule() {
		return getRelationshipSpecAccess().getRule();
	}
	
	//RelationTypeSpec returns RelationSpec:
	//    RelationSpec | ReferenceSpec | AggregationSpec
	//;
	public RelationTypeSpecElements getRelationTypeSpecAccess() {
		return pRelationTypeSpec;
	}
	
	public ParserRule getRelationTypeSpecRule() {
		return getRelationTypeSpecAccess().getRule();
	}
	
	//RelationSpec returns RelationSpec:
	//    {RelationSpec}
	//    'ANY' name=ID
	//;
	public RelationSpecElements getRelationSpecAccess() {
		return pRelationSpec;
	}
	
	public ParserRule getRelationSpecRule() {
		return getRelationSpecAccess().getRule();
	}
	
	//ReferenceSpec returns ReferenceSpec:
	//    {ReferenceSpec}
	//    'REF' (name=ID)? variationFilter=VariationFilter?
	//;
	public ReferenceSpecElements getReferenceSpecAccess() {
		return pReferenceSpec;
	}
	
	public ParserRule getReferenceSpecRule() {
		return getReferenceSpecAccess().getRule();
	}
	
	//AggregationSpec returns AggregationSpec:
	//    {AggregationSpec}
	//    'AGGR' (name=ID)?
	//;
	public AggregationSpecElements getAggregationSpecAccess() {
		return pAggregationSpec;
	}
	
	public ParserRule getAggregationSpecRule() {
		return getAggregationSpecAccess().getRule();
	}
	
	//IndirectRelationshipSpec returns RelationshipSpec:
	//    {RelationshipSpec}
	//    indirect?='>>'
	//    targetExpression=TargetExpression
	//    (=> relationSpec=IndirectRelationTypeSpec?)
	//;
	public IndirectRelationshipSpecElements getIndirectRelationshipSpecAccess() {
		return pIndirectRelationshipSpec;
	}
	
	public ParserRule getIndirectRelationshipSpecRule() {
		return getIndirectRelationshipSpecAccess().getRule();
	}
	
	//IndirectRelationTypeSpec returns RelationSpec:
	//    IndirectReferenceSpec | IndirectAggregationSpec
	//;
	public IndirectRelationTypeSpecElements getIndirectRelationTypeSpecAccess() {
		return pIndirectRelationTypeSpec;
	}
	
	public ParserRule getIndirectRelationTypeSpecRule() {
		return getIndirectRelationTypeSpecAccess().getRule();
	}
	
	//IndirectReferenceSpec returns ReferenceSpec:
	//    {ReferenceSpec}
	//    'REF'
	//;
	public IndirectReferenceSpecElements getIndirectReferenceSpecAccess() {
		return pIndirectReferenceSpec;
	}
	
	public ParserRule getIndirectReferenceSpecRule() {
		return getIndirectReferenceSpecAccess().getRule();
	}
	
	//IndirectAggregationSpec returns AggregationSpec:
	//    {AggregationSpec}
	//    'AGGR'
	//;
	public IndirectAggregationSpecElements getIndirectAggregationSpecAccess() {
		return pIndirectAggregationSpec;
	}
	
	public ParserRule getIndirectAggregationSpecRule() {
		return getIndirectAggregationSpecAccess().getRule();
	}
	
	//TargetExpression returns TargetExpression:
	//    RelationshipExpression | EntityExpression
	//;
	public TargetExpressionElements getTargetExpressionAccess() {
		return pTargetExpression;
	}
	
	public ParserRule getTargetExpressionRule() {
		return getTargetExpressionAccess().getRule();
	}
	
	//RelationshipExpression returns RelationshipExpression:
	//    {RelationshipExpression}
	//    relationshipQuery=NestedRelationshipQuery
	//;
	public RelationshipExpressionElements getRelationshipExpressionAccess() {
		return pRelationshipExpression;
	}
	
	public ParserRule getRelationshipExpressionRule() {
		return getRelationshipExpressionAccess().getRule();
	}
	
	//EntityExpression returns EntityExpression:
	//    {EntityExpression}
	//    entitySpec=ToReferenceEntitySpec
	//;
	public EntityExpressionElements getEntityExpressionAccess() {
		return pEntityExpression;
	}
	
	public ParserRule getEntityExpressionRule() {
		return getEntityExpressionAccess().getRule();
	}
	
	//ToReferenceEntitySpec returns EntitySpec:
	//    {EntitySpec}
	//    name=(ID | '*' | '_') variationFilter=ReferenceVariationFilter?
	//;
	public ToReferenceEntitySpecElements getToReferenceEntitySpecAccess() {
		return pToReferenceEntitySpec;
	}
	
	public ParserRule getToReferenceEntitySpecRule() {
		return getToReferenceEntitySpecAccess().getRule();
	}
	
	//ReferenceVariationFilter returns VariationFilter:
	//    {VariationFilter}
	//    ('[]' | '[' (propertySpecs+=ReferencePropertySpec (',' propertySpecs+=ReferencePropertySpec)*)? ']')
	//;
	public ReferenceVariationFilterElements getReferenceVariationFilterAccess() {
		return pReferenceVariationFilter;
	}
	
	public ParserRule getReferenceVariationFilterRule() {
		return getReferenceVariationFilterAccess().getRule();
	}
	
	//ReferencePropertySpec returns PropertySpec:
	//    {PropertySpec}
	//    name=(ID|'*') (':' type=PrimitiveType)?
	//;
	public ReferencePropertySpecElements getReferencePropertySpecAccess() {
		return pReferencePropertySpec;
	}
	
	public ParserRule getReferencePropertySpecRule() {
		return getReferencePropertySpecAccess().getRule();
	}
	
	//VariationFilter returns VariationFilter:
	//    {VariationFilter}
	//    ('[]' | '[' (propertySpecs+=PropertySpec (',' propertySpecs+=PropertySpec)*)? ']' (only?='ONLY')?)
	//;
	public VariationFilterElements getVariationFilterAccess() {
		return pVariationFilter;
	}
	
	public ParserRule getVariationFilterRule() {
		return getVariationFilterAccess().getRule();
	}
	
	//PropertySpec returns PropertySpec:
	//    {PropertySpec}
	//    name=(ID|'*') (':' type=Type)?
	//;
	public PropertySpecElements getPropertySpecAccess() {
		return pPropertySpec;
	}
	
	public ParserRule getPropertySpecRule() {
		return getPropertySpecAccess().getRule();
	}
	
	//Type returns Type:
	//    PrimitiveType | RelationshipType
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//PrimitiveType returns PrimitiveType:
	//    {PrimitiveType}
	//    type=TypeEnum (array?='[]')?
	//;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return pPrimitiveType;
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}
	
	//enum TypeEnum returns TypeEnum:
	//    STRING='string' | NUMBER='number' | BOOLEAN='boolean'
	//;
	public TypeEnumElements getTypeEnumAccess() {
		return eTypeEnum;
	}
	
	public EnumRule getTypeEnumRule() {
		return getTypeEnumAccess().getRule();
	}
	
	//RelationshipType returns RelationshipType:
	//    {RelationshipType}
	//    relationType=RelationshipTypeEnum targetEntityName=(ID|'*')?
	//;
	public RelationshipTypeElements getRelationshipTypeAccess() {
		return pRelationshipType;
	}
	
	public ParserRule getRelationshipTypeRule() {
		return getRelationshipTypeAccess().getRule();
	}
	
	//enum RelationshipTypeEnum returns RelationshipTypeEnum:
	//    RELATIONSHIP='ANY' | REFERENCE='REF' | AGGREGATION='AGGR'
	//;
	public RelationshipTypeEnumElements getRelationshipTypeEnumAccess() {
		return eRelationshipTypeEnum;
	}
	
	public EnumRule getRelationshipTypeEnumRule() {
		return getRelationshipTypeEnumAccess().getRule();
	}
	
	//VersionHistory returns VersionHistoryOperation:
	//    BeforeHistory | AfterHistory | BetweenHistory
	//;
	public VersionHistoryElements getVersionHistoryAccess() {
		return pVersionHistory;
	}
	
	public ParserRule getVersionHistoryRule() {
		return getVersionHistoryAccess().getRule();
	}
	
	//BeforeHistory returns Before:
	//    {Before}
	//    'BEFORE' '(' dateTime=DateTime ')'
	//;
	public BeforeHistoryElements getBeforeHistoryAccess() {
		return pBeforeHistory;
	}
	
	public ParserRule getBeforeHistoryRule() {
		return getBeforeHistoryAccess().getRule();
	}
	
	//AfterHistory returns After:
	//    {After}
	//    'AFTER' '(' dateTime=DateTime ')'
	//;
	public AfterHistoryElements getAfterHistoryAccess() {
		return pAfterHistory;
	}
	
	public ParserRule getAfterHistoryRule() {
		return getAfterHistoryAccess().getRule();
	}
	
	//BetweenHistory returns Between:
	//    {Between}
	//    'BETWEEN' '(' afterDateTime=DateTime ',' beforeDateTime=DateTime ')'
	//;
	public BetweenHistoryElements getBetweenHistoryAccess() {
		return pBetweenHistory;
	}
	
	public ParserRule getBetweenHistoryRule() {
		return getBetweenHistoryAccess().getRule();
	}
	
	//DateTime returns DateTime:
	//    {DateTime}
	//    (year=INT) '-' (month=INT) '-' (day=INT) (hour=INT ':' minutes=INT ':' seconds=INT)?
	//;
	public DateTimeElements getDateTimeAccess() {
		return pDateTime;
	}
	
	public ParserRule getDateTimeRule() {
		return getDateTimeAccess().getRule();
	}
	
	//@Override
	//terminal ID returns ecore::EString: ('a'..'z'|'A'..'Z'|'_'|'*')('a'..'z'|'A'..'Z'|'_'|'*'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//@Override
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
