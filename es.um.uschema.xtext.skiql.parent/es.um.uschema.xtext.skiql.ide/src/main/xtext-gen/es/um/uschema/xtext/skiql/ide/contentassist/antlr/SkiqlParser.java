/*
 * generated by Xtext 2.29.0
 */
package es.um.uschema.xtext.skiql.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import es.um.uschema.xtext.skiql.ide.contentassist.antlr.internal.InternalSkiqlParser;
import es.um.uschema.xtext.skiql.services.SkiqlGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SkiqlParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SkiqlGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SkiqlGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getQueryAccess().getAlternatives(), "rule__Query__Alternatives");
			builder.put(grammarAccess.getOperationAccess().getAlternatives(), "rule__Operation__Alternatives");
			builder.put(grammarAccess.getRelationshipTypeSpecAccess().getNameAlternatives_1_0(), "rule__RelationshipTypeSpec__NameAlternatives_1_0");
			builder.put(grammarAccess.getSchemaTypeSpecAccess().getNameAlternatives_1_0(), "rule__SchemaTypeSpec__NameAlternatives_1_0");
			builder.put(grammarAccess.getEntitySpecAccess().getNameAlternatives_1_0(), "rule__EntitySpec__NameAlternatives_1_0");
			builder.put(grammarAccess.getReferenceEntitySpecAccess().getNameAlternatives_1_0(), "rule__ReferenceEntitySpec__NameAlternatives_1_0");
			builder.put(grammarAccess.getRelationshipQueryAccess().getAlternatives_4(), "rule__RelationshipQuery__Alternatives_4");
			builder.put(grammarAccess.getRelationshipQueryAccess().getAlternatives_5_1(), "rule__RelationshipQuery__Alternatives_5_1");
			builder.put(grammarAccess.getNestedRelationshipQueryAccess().getAlternatives_5(), "rule__NestedRelationshipQuery__Alternatives_5");
			builder.put(grammarAccess.getNestedRelationshipQueryAccess().getAlternatives_6_1(), "rule__NestedRelationshipQuery__Alternatives_6_1");
			builder.put(grammarAccess.getRelationTypeSpecAccess().getAlternatives(), "rule__RelationTypeSpec__Alternatives");
			builder.put(grammarAccess.getIndirectRelationTypeSpecAccess().getAlternatives(), "rule__IndirectRelationTypeSpec__Alternatives");
			builder.put(grammarAccess.getTargetExpressionAccess().getAlternatives(), "rule__TargetExpression__Alternatives");
			builder.put(grammarAccess.getToReferenceEntitySpecAccess().getNameAlternatives_1_0(), "rule__ToReferenceEntitySpec__NameAlternatives_1_0");
			builder.put(grammarAccess.getReferenceVariationFilterAccess().getAlternatives_1(), "rule__ReferenceVariationFilter__Alternatives_1");
			builder.put(grammarAccess.getReferencePropertySpecAccess().getNameAlternatives_1_0(), "rule__ReferencePropertySpec__NameAlternatives_1_0");
			builder.put(grammarAccess.getVariationFilterAccess().getAlternatives_1(), "rule__VariationFilter__Alternatives_1");
			builder.put(grammarAccess.getPropertySpecAccess().getNameAlternatives_1_0(), "rule__PropertySpec__NameAlternatives_1_0");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getRelationshipTypeAccess().getTargetEntityNameAlternatives_2_0(), "rule__RelationshipType__TargetEntityNameAlternatives_2_0");
			builder.put(grammarAccess.getVersionHistoryAccess().getAlternatives(), "rule__VersionHistory__Alternatives");
			builder.put(grammarAccess.getTypeEnumAccess().getAlternatives(), "rule__TypeEnum__Alternatives");
			builder.put(grammarAccess.getRelationshipTypeEnumAccess().getAlternatives(), "rule__RelationshipTypeEnum__Alternatives");
			builder.put(grammarAccess.getSkiQLModelAccess().getGroup(), "rule__SkiQLModel__Group__0");
			builder.put(grammarAccess.getEntityTypeQueryAccess().getGroup(), "rule__EntityTypeQuery__Group__0");
			builder.put(grammarAccess.getRelationshipTypeQueryAccess().getGroup(), "rule__RelationshipTypeQuery__Group__0");
			builder.put(grammarAccess.getAnyQueryAccess().getGroup(), "rule__AnyQuery__Group__0");
			builder.put(grammarAccess.getKeysSpecAccess().getGroup(), "rule__KeysSpec__Group__0");
			builder.put(grammarAccess.getRelationshipTypeSpecAccess().getGroup(), "rule__RelationshipTypeSpec__Group__0");
			builder.put(grammarAccess.getSchemaTypeSpecAccess().getGroup(), "rule__SchemaTypeSpec__Group__0");
			builder.put(grammarAccess.getEntitySpecAccess().getGroup(), "rule__EntitySpec__Group__0");
			builder.put(grammarAccess.getReferenceEntitySpecAccess().getGroup(), "rule__ReferenceEntitySpec__Group__0");
			builder.put(grammarAccess.getRelationshipQueryAccess().getGroup(), "rule__RelationshipQuery__Group__0");
			builder.put(grammarAccess.getRelationshipQueryAccess().getGroup_5(), "rule__RelationshipQuery__Group_5__0");
			builder.put(grammarAccess.getNestedRelationshipQueryAccess().getGroup(), "rule__NestedRelationshipQuery__Group__0");
			builder.put(grammarAccess.getNestedRelationshipQueryAccess().getGroup_6(), "rule__NestedRelationshipQuery__Group_6__0");
			builder.put(grammarAccess.getRelationshipSpecAccess().getGroup(), "rule__RelationshipSpec__Group__0");
			builder.put(grammarAccess.getRelationSpecAccess().getGroup(), "rule__RelationSpec__Group__0");
			builder.put(grammarAccess.getReferenceSpecAccess().getGroup(), "rule__ReferenceSpec__Group__0");
			builder.put(grammarAccess.getAggregationSpecAccess().getGroup(), "rule__AggregationSpec__Group__0");
			builder.put(grammarAccess.getIndirectRelationshipSpecAccess().getGroup(), "rule__IndirectRelationshipSpec__Group__0");
			builder.put(grammarAccess.getIndirectReferenceSpecAccess().getGroup(), "rule__IndirectReferenceSpec__Group__0");
			builder.put(grammarAccess.getIndirectAggregationSpecAccess().getGroup(), "rule__IndirectAggregationSpec__Group__0");
			builder.put(grammarAccess.getRelationshipExpressionAccess().getGroup(), "rule__RelationshipExpression__Group__0");
			builder.put(grammarAccess.getEntityExpressionAccess().getGroup(), "rule__EntityExpression__Group__0");
			builder.put(grammarAccess.getToReferenceEntitySpecAccess().getGroup(), "rule__ToReferenceEntitySpec__Group__0");
			builder.put(grammarAccess.getReferenceVariationFilterAccess().getGroup(), "rule__ReferenceVariationFilter__Group__0");
			builder.put(grammarAccess.getReferenceVariationFilterAccess().getGroup_1_1(), "rule__ReferenceVariationFilter__Group_1_1__0");
			builder.put(grammarAccess.getReferenceVariationFilterAccess().getGroup_1_1_1(), "rule__ReferenceVariationFilter__Group_1_1_1__0");
			builder.put(grammarAccess.getReferenceVariationFilterAccess().getGroup_1_1_1_1(), "rule__ReferenceVariationFilter__Group_1_1_1_1__0");
			builder.put(grammarAccess.getReferencePropertySpecAccess().getGroup(), "rule__ReferencePropertySpec__Group__0");
			builder.put(grammarAccess.getReferencePropertySpecAccess().getGroup_2(), "rule__ReferencePropertySpec__Group_2__0");
			builder.put(grammarAccess.getVariationFilterAccess().getGroup(), "rule__VariationFilter__Group__0");
			builder.put(grammarAccess.getVariationFilterAccess().getGroup_1_1(), "rule__VariationFilter__Group_1_1__0");
			builder.put(grammarAccess.getVariationFilterAccess().getGroup_1_1_1(), "rule__VariationFilter__Group_1_1_1__0");
			builder.put(grammarAccess.getVariationFilterAccess().getGroup_1_1_1_1(), "rule__VariationFilter__Group_1_1_1_1__0");
			builder.put(grammarAccess.getPropertySpecAccess().getGroup(), "rule__PropertySpec__Group__0");
			builder.put(grammarAccess.getPropertySpecAccess().getGroup_2(), "rule__PropertySpec__Group_2__0");
			builder.put(grammarAccess.getPrimitiveTypeAccess().getGroup(), "rule__PrimitiveType__Group__0");
			builder.put(grammarAccess.getRelationshipTypeAccess().getGroup(), "rule__RelationshipType__Group__0");
			builder.put(grammarAccess.getBeforeHistoryAccess().getGroup(), "rule__BeforeHistory__Group__0");
			builder.put(grammarAccess.getAfterHistoryAccess().getGroup(), "rule__AfterHistory__Group__0");
			builder.put(grammarAccess.getBetweenHistoryAccess().getGroup(), "rule__BetweenHistory__Group__0");
			builder.put(grammarAccess.getDateTimeAccess().getGroup(), "rule__DateTime__Group__0");
			builder.put(grammarAccess.getDateTimeAccess().getGroup_6(), "rule__DateTime__Group_6__0");
			builder.put(grammarAccess.getSkiQLModelAccess().getQueryAssignment_1(), "rule__SkiQLModel__QueryAssignment_1");
			builder.put(grammarAccess.getEntityTypeQueryAccess().getSchemaSpecAssignment_2(), "rule__EntityTypeQuery__SchemaSpecAssignment_2");
			builder.put(grammarAccess.getEntityTypeQueryAccess().getOperationAssignment_3(), "rule__EntityTypeQuery__OperationAssignment_3");
			builder.put(grammarAccess.getRelationshipTypeQueryAccess().getSchemaSpecAssignment_2(), "rule__RelationshipTypeQuery__SchemaSpecAssignment_2");
			builder.put(grammarAccess.getRelationshipTypeQueryAccess().getOperationAssignment_3(), "rule__RelationshipTypeQuery__OperationAssignment_3");
			builder.put(grammarAccess.getAnyQueryAccess().getSchemaSpecAssignment_2(), "rule__AnyQuery__SchemaSpecAssignment_2");
			builder.put(grammarAccess.getAnyQueryAccess().getOperationAssignment_3(), "rule__AnyQuery__OperationAssignment_3");
			builder.put(grammarAccess.getRelationshipTypeSpecAccess().getNameAssignment_1(), "rule__RelationshipTypeSpec__NameAssignment_1");
			builder.put(grammarAccess.getRelationshipTypeSpecAccess().getVariationFilterAssignment_2(), "rule__RelationshipTypeSpec__VariationFilterAssignment_2");
			builder.put(grammarAccess.getSchemaTypeSpecAccess().getNameAssignment_1(), "rule__SchemaTypeSpec__NameAssignment_1");
			builder.put(grammarAccess.getSchemaTypeSpecAccess().getVariationFilterAssignment_2(), "rule__SchemaTypeSpec__VariationFilterAssignment_2");
			builder.put(grammarAccess.getEntitySpecAccess().getNameAssignment_1(), "rule__EntitySpec__NameAssignment_1");
			builder.put(grammarAccess.getEntitySpecAccess().getVariationFilterAssignment_2(), "rule__EntitySpec__VariationFilterAssignment_2");
			builder.put(grammarAccess.getReferenceEntitySpecAccess().getNameAssignment_1(), "rule__ReferenceEntitySpec__NameAssignment_1");
			builder.put(grammarAccess.getReferenceEntitySpecAccess().getVariationFilterAssignment_2(), "rule__ReferenceEntitySpec__VariationFilterAssignment_2");
			builder.put(grammarAccess.getRelationshipQueryAccess().getFromAssignment_2(), "rule__RelationshipQuery__FromAssignment_2");
			builder.put(grammarAccess.getRelationshipQueryAccess().getToAssignment_4_0(), "rule__RelationshipQuery__ToAssignment_4_0");
			builder.put(grammarAccess.getRelationshipQueryAccess().getToAssignment_4_1(), "rule__RelationshipQuery__ToAssignment_4_1");
			builder.put(grammarAccess.getRelationshipQueryAccess().getToAssignment_5_1_0(), "rule__RelationshipQuery__ToAssignment_5_1_0");
			builder.put(grammarAccess.getRelationshipQueryAccess().getToAssignment_5_1_1(), "rule__RelationshipQuery__ToAssignment_5_1_1");
			builder.put(grammarAccess.getNestedRelationshipQueryAccess().getFromAssignment_3(), "rule__NestedRelationshipQuery__FromAssignment_3");
			builder.put(grammarAccess.getNestedRelationshipQueryAccess().getToAssignment_5_0(), "rule__NestedRelationshipQuery__ToAssignment_5_0");
			builder.put(grammarAccess.getNestedRelationshipQueryAccess().getToAssignment_5_1(), "rule__NestedRelationshipQuery__ToAssignment_5_1");
			builder.put(grammarAccess.getNestedRelationshipQueryAccess().getToAssignment_6_1_0(), "rule__NestedRelationshipQuery__ToAssignment_6_1_0");
			builder.put(grammarAccess.getNestedRelationshipQueryAccess().getToAssignment_6_1_1(), "rule__NestedRelationshipQuery__ToAssignment_6_1_1");
			builder.put(grammarAccess.getRelationshipSpecAccess().getTargetExpressionAssignment_1(), "rule__RelationshipSpec__TargetExpressionAssignment_1");
			builder.put(grammarAccess.getRelationshipSpecAccess().getRelationSpecAssignment_2(), "rule__RelationshipSpec__RelationSpecAssignment_2");
			builder.put(grammarAccess.getRelationSpecAccess().getNameAssignment_2(), "rule__RelationSpec__NameAssignment_2");
			builder.put(grammarAccess.getReferenceSpecAccess().getNameAssignment_2(), "rule__ReferenceSpec__NameAssignment_2");
			builder.put(grammarAccess.getReferenceSpecAccess().getVariationFilterAssignment_3(), "rule__ReferenceSpec__VariationFilterAssignment_3");
			builder.put(grammarAccess.getAggregationSpecAccess().getNameAssignment_2(), "rule__AggregationSpec__NameAssignment_2");
			builder.put(grammarAccess.getIndirectRelationshipSpecAccess().getIndirectAssignment_1(), "rule__IndirectRelationshipSpec__IndirectAssignment_1");
			builder.put(grammarAccess.getIndirectRelationshipSpecAccess().getTargetExpressionAssignment_2(), "rule__IndirectRelationshipSpec__TargetExpressionAssignment_2");
			builder.put(grammarAccess.getIndirectRelationshipSpecAccess().getRelationSpecAssignment_3(), "rule__IndirectRelationshipSpec__RelationSpecAssignment_3");
			builder.put(grammarAccess.getRelationshipExpressionAccess().getRelationshipQueryAssignment_1(), "rule__RelationshipExpression__RelationshipQueryAssignment_1");
			builder.put(grammarAccess.getEntityExpressionAccess().getEntitySpecAssignment_1(), "rule__EntityExpression__EntitySpecAssignment_1");
			builder.put(grammarAccess.getToReferenceEntitySpecAccess().getNameAssignment_1(), "rule__ToReferenceEntitySpec__NameAssignment_1");
			builder.put(grammarAccess.getToReferenceEntitySpecAccess().getVariationFilterAssignment_2(), "rule__ToReferenceEntitySpec__VariationFilterAssignment_2");
			builder.put(grammarAccess.getReferenceVariationFilterAccess().getPropertySpecsAssignment_1_1_1_0(), "rule__ReferenceVariationFilter__PropertySpecsAssignment_1_1_1_0");
			builder.put(grammarAccess.getReferenceVariationFilterAccess().getPropertySpecsAssignment_1_1_1_1_1(), "rule__ReferenceVariationFilter__PropertySpecsAssignment_1_1_1_1_1");
			builder.put(grammarAccess.getReferencePropertySpecAccess().getNameAssignment_1(), "rule__ReferencePropertySpec__NameAssignment_1");
			builder.put(grammarAccess.getReferencePropertySpecAccess().getTypeAssignment_2_1(), "rule__ReferencePropertySpec__TypeAssignment_2_1");
			builder.put(grammarAccess.getVariationFilterAccess().getPropertySpecsAssignment_1_1_1_0(), "rule__VariationFilter__PropertySpecsAssignment_1_1_1_0");
			builder.put(grammarAccess.getVariationFilterAccess().getPropertySpecsAssignment_1_1_1_1_1(), "rule__VariationFilter__PropertySpecsAssignment_1_1_1_1_1");
			builder.put(grammarAccess.getVariationFilterAccess().getOnlyAssignment_1_1_3(), "rule__VariationFilter__OnlyAssignment_1_1_3");
			builder.put(grammarAccess.getPropertySpecAccess().getNameAssignment_1(), "rule__PropertySpec__NameAssignment_1");
			builder.put(grammarAccess.getPropertySpecAccess().getTypeAssignment_2_1(), "rule__PropertySpec__TypeAssignment_2_1");
			builder.put(grammarAccess.getPrimitiveTypeAccess().getTypeAssignment_1(), "rule__PrimitiveType__TypeAssignment_1");
			builder.put(grammarAccess.getPrimitiveTypeAccess().getArrayAssignment_2(), "rule__PrimitiveType__ArrayAssignment_2");
			builder.put(grammarAccess.getRelationshipTypeAccess().getRelationTypeAssignment_1(), "rule__RelationshipType__RelationTypeAssignment_1");
			builder.put(grammarAccess.getRelationshipTypeAccess().getTargetEntityNameAssignment_2(), "rule__RelationshipType__TargetEntityNameAssignment_2");
			builder.put(grammarAccess.getBeforeHistoryAccess().getDateTimeAssignment_3(), "rule__BeforeHistory__DateTimeAssignment_3");
			builder.put(grammarAccess.getAfterHistoryAccess().getDateTimeAssignment_3(), "rule__AfterHistory__DateTimeAssignment_3");
			builder.put(grammarAccess.getBetweenHistoryAccess().getAfterDateTimeAssignment_3(), "rule__BetweenHistory__AfterDateTimeAssignment_3");
			builder.put(grammarAccess.getBetweenHistoryAccess().getBeforeDateTimeAssignment_5(), "rule__BetweenHistory__BeforeDateTimeAssignment_5");
			builder.put(grammarAccess.getDateTimeAccess().getYearAssignment_1(), "rule__DateTime__YearAssignment_1");
			builder.put(grammarAccess.getDateTimeAccess().getMonthAssignment_3(), "rule__DateTime__MonthAssignment_3");
			builder.put(grammarAccess.getDateTimeAccess().getDayAssignment_5(), "rule__DateTime__DayAssignment_5");
			builder.put(grammarAccess.getDateTimeAccess().getHourAssignment_6_0(), "rule__DateTime__HourAssignment_6_0");
			builder.put(grammarAccess.getDateTimeAccess().getMinutesAssignment_6_2(), "rule__DateTime__MinutesAssignment_6_2");
			builder.put(grammarAccess.getDateTimeAccess().getSecondsAssignment_6_4(), "rule__DateTime__SecondsAssignment_6_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SkiqlGrammarAccess grammarAccess;

	@Override
	protected InternalSkiqlParser createParser() {
		InternalSkiqlParser result = new InternalSkiqlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SkiqlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SkiqlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
