/*
 * generated by Xtext 2.29.0
 */
grammar InternalSkiql;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package es.um.uschema.xtext.skiql.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package es.um.uschema.xtext.skiql.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import es.um.uschema.xtext.skiql.services.SkiqlGrammarAccess;

}

@parser::members {

 	private SkiqlGrammarAccess grammarAccess;

    public InternalSkiqlParser(TokenStream input, SkiqlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "SkiQLModel";
   	}

   	@Override
   	protected SkiqlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSkiQLModel
entryRuleSkiQLModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSkiQLModelRule()); }
	iv_ruleSkiQLModel=ruleSkiQLModel
	{ $current=$iv_ruleSkiQLModel.current; }
	EOF;

// Rule SkiQLModel
ruleSkiQLModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSkiQLModelAccess().getSkiQLModelAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSkiQLModelAccess().getQueryQueryParserRuleCall_1_0());
				}
				lv_query_1_0=ruleQuery
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSkiQLModelRule());
					}
					set(
						$current,
						"query",
						lv_query_1_0,
						"es.um.uschema.xtext.skiql.Skiql.Query");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQuery
entryRuleQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQueryRule()); }
	iv_ruleQuery=ruleQuery
	{ $current=$iv_ruleQuery.current; }
	EOF;

// Rule Query
ruleQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQueryAccess().getEntityTypeQueryParserRuleCall_0());
		}
		this_EntityTypeQuery_0=ruleEntityTypeQuery
		{
			$current = $this_EntityTypeQuery_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getQueryAccess().getRelationshipTypeQueryParserRuleCall_1());
		}
		this_RelationshipTypeQuery_1=ruleRelationshipTypeQuery
		{
			$current = $this_RelationshipTypeQuery_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getQueryAccess().getRelationshipQueryParserRuleCall_2());
		}
		this_RelationshipQuery_2=ruleRelationshipQuery
		{
			$current = $this_RelationshipQuery_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getQueryAccess().getAnyQueryParserRuleCall_3());
		}
		this_AnyQuery_3=ruleAnyQuery
		{
			$current = $this_AnyQuery_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEntityTypeQuery
entryRuleEntityTypeQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityTypeQueryRule()); }
	iv_ruleEntityTypeQuery=ruleEntityTypeQuery
	{ $current=$iv_ruleEntityTypeQuery.current; }
	EOF;

// Rule EntityTypeQuery
ruleEntityTypeQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEntityTypeQueryAccess().getSchemaQueryAction_0(),
					$current);
			}
		)
		otherlv_1='ENTITY'
		{
			newLeafNode(otherlv_1, grammarAccess.getEntityTypeQueryAccess().getENTITYKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityTypeQueryAccess().getSchemaSpecEntitySpecParserRuleCall_2_0());
				}
				lv_schemaSpec_2_0=ruleEntitySpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityTypeQueryRule());
					}
					set(
						$current,
						"schemaSpec",
						lv_schemaSpec_2_0,
						"es.um.uschema.xtext.skiql.Skiql.EntitySpec");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityTypeQueryAccess().getOperationOperationParserRuleCall_3_0());
				}
				lv_operation_3_0=ruleOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityTypeQueryRule());
					}
					set(
						$current,
						"operation",
						lv_operation_3_0,
						"es.um.uschema.xtext.skiql.Skiql.Operation");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleRelationshipTypeQuery
entryRuleRelationshipTypeQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationshipTypeQueryRule()); }
	iv_ruleRelationshipTypeQuery=ruleRelationshipTypeQuery
	{ $current=$iv_ruleRelationshipTypeQuery.current; }
	EOF;

// Rule RelationshipTypeQuery
ruleRelationshipTypeQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRelationshipTypeQueryAccess().getSchemaQueryAction_0(),
					$current);
			}
		)
		otherlv_1='REL'
		{
			newLeafNode(otherlv_1, grammarAccess.getRelationshipTypeQueryAccess().getRELKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationshipTypeQueryAccess().getSchemaSpecRelationshipTypeSpecParserRuleCall_2_0());
				}
				lv_schemaSpec_2_0=ruleRelationshipTypeSpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationshipTypeQueryRule());
					}
					set(
						$current,
						"schemaSpec",
						lv_schemaSpec_2_0,
						"es.um.uschema.xtext.skiql.Skiql.RelationshipTypeSpec");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationshipTypeQueryAccess().getOperationOperationParserRuleCall_3_0());
				}
				lv_operation_3_0=ruleOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationshipTypeQueryRule());
					}
					set(
						$current,
						"operation",
						lv_operation_3_0,
						"es.um.uschema.xtext.skiql.Skiql.Operation");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleAnyQuery
entryRuleAnyQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnyQueryRule()); }
	iv_ruleAnyQuery=ruleAnyQuery
	{ $current=$iv_ruleAnyQuery.current; }
	EOF;

// Rule AnyQuery
ruleAnyQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAnyQueryAccess().getSchemaQueryAction_0(),
					$current);
			}
		)
		otherlv_1='ANY'
		{
			newLeafNode(otherlv_1, grammarAccess.getAnyQueryAccess().getANYKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAnyQueryAccess().getSchemaSpecSchemaTypeSpecParserRuleCall_2_0());
				}
				lv_schemaSpec_2_0=ruleSchemaTypeSpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnyQueryRule());
					}
					set(
						$current,
						"schemaSpec",
						lv_schemaSpec_2_0,
						"es.um.uschema.xtext.skiql.Skiql.SchemaTypeSpec");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAnyQueryAccess().getOperationOperationParserRuleCall_3_0());
				}
				lv_operation_3_0=ruleOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnyQueryRule());
					}
					set(
						$current,
						"operation",
						lv_operation_3_0,
						"es.um.uschema.xtext.skiql.Skiql.Operation");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	iv_ruleOperation=ruleOperation
	{ $current=$iv_ruleOperation.current; }
	EOF;

// Rule Operation
ruleOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperationAccess().getKeysSpecParserRuleCall_0());
		}
		this_KeysSpec_0=ruleKeysSpec
		{
			$current = $this_KeysSpec_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperationAccess().getVersionHistoryParserRuleCall_1());
		}
		this_VersionHistory_1=ruleVersionHistory
		{
			$current = $this_VersionHistory_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleKeysSpec
entryRuleKeysSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeysSpecRule()); }
	iv_ruleKeysSpec=ruleKeysSpec
	{ $current=$iv_ruleKeysSpec.current; }
	EOF;

// Rule KeysSpec
ruleKeysSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getKeysSpecAccess().getKeysSpecAction_0(),
					$current);
			}
		)
		otherlv_1='KEYS'
		{
			newLeafNode(otherlv_1, grammarAccess.getKeysSpecAccess().getKEYSKeyword_1());
		}
	)
;

// Entry rule entryRuleRelationshipTypeSpec
entryRuleRelationshipTypeSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationshipTypeSpecRule()); }
	iv_ruleRelationshipTypeSpec=ruleRelationshipTypeSpec
	{ $current=$iv_ruleRelationshipTypeSpec.current; }
	EOF;

// Rule RelationshipTypeSpec
ruleRelationshipTypeSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRelationshipTypeSpecAccess().getRelationshipTypeSpecAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_name_1_1=RULE_ID
					{
						newLeafNode(lv_name_1_1, grammarAccess.getRelationshipTypeSpecAccess().getNameIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRelationshipTypeSpecRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_1,
							"es.um.uschema.xtext.skiql.Skiql.ID");
					}
					    |
					lv_name_1_2='*'
					{
						newLeafNode(lv_name_1_2, grammarAccess.getRelationshipTypeSpecAccess().getNameAsteriskKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRelationshipTypeSpecRule());
						}
						setWithLastConsumed($current, "name", lv_name_1_2, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationshipTypeSpecAccess().getVariationFilterVariationFilterParserRuleCall_2_0());
				}
				lv_variationFilter_2_0=ruleVariationFilter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationshipTypeSpecRule());
					}
					set(
						$current,
						"variationFilter",
						lv_variationFilter_2_0,
						"es.um.uschema.xtext.skiql.Skiql.VariationFilter");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleSchemaTypeSpec
entryRuleSchemaTypeSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSchemaTypeSpecRule()); }
	iv_ruleSchemaTypeSpec=ruleSchemaTypeSpec
	{ $current=$iv_ruleSchemaTypeSpec.current; }
	EOF;

// Rule SchemaTypeSpec
ruleSchemaTypeSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSchemaTypeSpecAccess().getSchemaSpecAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_name_1_1=RULE_ID
					{
						newLeafNode(lv_name_1_1, grammarAccess.getSchemaTypeSpecAccess().getNameIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSchemaTypeSpecRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_1,
							"es.um.uschema.xtext.skiql.Skiql.ID");
					}
					    |
					lv_name_1_2='*'
					{
						newLeafNode(lv_name_1_2, grammarAccess.getSchemaTypeSpecAccess().getNameAsteriskKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSchemaTypeSpecRule());
						}
						setWithLastConsumed($current, "name", lv_name_1_2, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSchemaTypeSpecAccess().getVariationFilterVariationFilterParserRuleCall_2_0());
				}
				lv_variationFilter_2_0=ruleVariationFilter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSchemaTypeSpecRule());
					}
					set(
						$current,
						"variationFilter",
						lv_variationFilter_2_0,
						"es.um.uschema.xtext.skiql.Skiql.VariationFilter");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleEntitySpec
entryRuleEntitySpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntitySpecRule()); }
	iv_ruleEntitySpec=ruleEntitySpec
	{ $current=$iv_ruleEntitySpec.current; }
	EOF;

// Rule EntitySpec
ruleEntitySpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEntitySpecAccess().getEntitySpecAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_name_1_1=RULE_ID
					{
						newLeafNode(lv_name_1_1, grammarAccess.getEntitySpecAccess().getNameIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEntitySpecRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_1,
							"es.um.uschema.xtext.skiql.Skiql.ID");
					}
					    |
					lv_name_1_2='*'
					{
						newLeafNode(lv_name_1_2, grammarAccess.getEntitySpecAccess().getNameAsteriskKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEntitySpecRule());
						}
						setWithLastConsumed($current, "name", lv_name_1_2, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEntitySpecAccess().getVariationFilterVariationFilterParserRuleCall_2_0());
				}
				lv_variationFilter_2_0=ruleVariationFilter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntitySpecRule());
					}
					set(
						$current,
						"variationFilter",
						lv_variationFilter_2_0,
						"es.um.uschema.xtext.skiql.Skiql.VariationFilter");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleReferenceEntitySpec
entryRuleReferenceEntitySpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReferenceEntitySpecRule()); }
	iv_ruleReferenceEntitySpec=ruleReferenceEntitySpec
	{ $current=$iv_ruleReferenceEntitySpec.current; }
	EOF;

// Rule ReferenceEntitySpec
ruleReferenceEntitySpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReferenceEntitySpecAccess().getEntitySpecAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_name_1_1=RULE_ID
					{
						newLeafNode(lv_name_1_1, grammarAccess.getReferenceEntitySpecAccess().getNameIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getReferenceEntitySpecRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_1,
							"es.um.uschema.xtext.skiql.Skiql.ID");
					}
					    |
					lv_name_1_2='*'
					{
						newLeafNode(lv_name_1_2, grammarAccess.getReferenceEntitySpecAccess().getNameAsteriskKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getReferenceEntitySpecRule());
						}
						setWithLastConsumed($current, "name", lv_name_1_2, null);
					}
					    |
					lv_name_1_3='_'
					{
						newLeafNode(lv_name_1_3, grammarAccess.getReferenceEntitySpecAccess().getName_Keyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getReferenceEntitySpecRule());
						}
						setWithLastConsumed($current, "name", lv_name_1_3, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getReferenceEntitySpecAccess().getVariationFilterReferenceVariationFilterParserRuleCall_2_0());
				}
				lv_variationFilter_2_0=ruleReferenceVariationFilter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReferenceEntitySpecRule());
					}
					set(
						$current,
						"variationFilter",
						lv_variationFilter_2_0,
						"es.um.uschema.xtext.skiql.Skiql.ReferenceVariationFilter");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleRelationshipQuery
entryRuleRelationshipQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationshipQueryRule()); }
	iv_ruleRelationshipQuery=ruleRelationshipQuery
	{ $current=$iv_ruleRelationshipQuery.current; }
	EOF;

// Rule RelationshipQuery
ruleRelationshipQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRelationshipQueryAccess().getRelationshipQueryAction_0(),
					$current);
			}
		)
		otherlv_1='FROM'
		{
			newLeafNode(otherlv_1, grammarAccess.getRelationshipQueryAccess().getFROMKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationshipQueryAccess().getFromReferenceEntitySpecParserRuleCall_2_0());
				}
				lv_from_2_0=ruleReferenceEntitySpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationshipQueryRule());
					}
					set(
						$current,
						"from",
						lv_from_2_0,
						"es.um.uschema.xtext.skiql.Skiql.ReferenceEntitySpec");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='TO'
		{
			newLeafNode(otherlv_3, grammarAccess.getRelationshipQueryAccess().getTOKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRelationshipQueryAccess().getToRelationshipSpecParserRuleCall_4_0_0());
					}
					lv_to_4_0=ruleRelationshipSpec
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationshipQueryRule());
						}
						add(
							$current,
							"to",
							lv_to_4_0,
							"es.um.uschema.xtext.skiql.Skiql.RelationshipSpec");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				((
					ruleIndirectRelationshipSpec
				)
				)=>
				(
					{
						newCompositeNode(grammarAccess.getRelationshipQueryAccess().getToIndirectRelationshipSpecParserRuleCall_4_1_0());
					}
					lv_to_5_0=ruleIndirectRelationshipSpec
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationshipQueryRule());
						}
						add(
							$current,
							"to",
							lv_to_5_0,
							"es.um.uschema.xtext.skiql.Skiql.IndirectRelationshipSpec");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				(',')=>
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getRelationshipQueryAccess().getCommaKeyword_5_0());
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getRelationshipQueryAccess().getToRelationshipSpecParserRuleCall_5_1_0_0());
						}
						lv_to_7_0=ruleRelationshipSpec
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRelationshipQueryRule());
							}
							add(
								$current,
								"to",
								lv_to_7_0,
								"es.um.uschema.xtext.skiql.Skiql.RelationshipSpec");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					((
						ruleIndirectRelationshipSpec
					)
					)=>
					(
						{
							newCompositeNode(grammarAccess.getRelationshipQueryAccess().getToIndirectRelationshipSpecParserRuleCall_5_1_1_0());
						}
						lv_to_8_0=ruleIndirectRelationshipSpec
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRelationshipQueryRule());
							}
							add(
								$current,
								"to",
								lv_to_8_0,
								"es.um.uschema.xtext.skiql.Skiql.IndirectRelationshipSpec");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleNestedRelationshipQuery
entryRuleNestedRelationshipQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNestedRelationshipQueryRule()); }
	iv_ruleNestedRelationshipQuery=ruleNestedRelationshipQuery
	{ $current=$iv_ruleNestedRelationshipQuery.current; }
	EOF;

// Rule NestedRelationshipQuery
ruleNestedRelationshipQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNestedRelationshipQueryAccess().getRelationshipQueryAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getNestedRelationshipQueryAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			otherlv_2='FROM'
			{
				newLeafNode(otherlv_2, grammarAccess.getNestedRelationshipQueryAccess().getFROMKeyword_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getNestedRelationshipQueryAccess().getFromReferenceEntitySpecParserRuleCall_3_0());
				}
				lv_from_3_0=ruleReferenceEntitySpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNestedRelationshipQueryRule());
					}
					set(
						$current,
						"from",
						lv_from_3_0,
						"es.um.uschema.xtext.skiql.Skiql.ReferenceEntitySpec");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='TO'
		{
			newLeafNode(otherlv_4, grammarAccess.getNestedRelationshipQueryAccess().getTOKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getNestedRelationshipQueryAccess().getToRelationshipSpecParserRuleCall_5_0_0());
					}
					lv_to_5_0=ruleRelationshipSpec
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNestedRelationshipQueryRule());
						}
						add(
							$current,
							"to",
							lv_to_5_0,
							"es.um.uschema.xtext.skiql.Skiql.RelationshipSpec");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				((
					ruleIndirectRelationshipSpec
				)
				)=>
				(
					{
						newCompositeNode(grammarAccess.getNestedRelationshipQueryAccess().getToIndirectRelationshipSpecParserRuleCall_5_1_0());
					}
					lv_to_6_0=ruleIndirectRelationshipSpec
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNestedRelationshipQueryRule());
						}
						add(
							$current,
							"to",
							lv_to_6_0,
							"es.um.uschema.xtext.skiql.Skiql.IndirectRelationshipSpec");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				(',')=>
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getNestedRelationshipQueryAccess().getCommaKeyword_6_0());
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getNestedRelationshipQueryAccess().getToRelationshipSpecParserRuleCall_6_1_0_0());
						}
						lv_to_8_0=ruleRelationshipSpec
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNestedRelationshipQueryRule());
							}
							add(
								$current,
								"to",
								lv_to_8_0,
								"es.um.uschema.xtext.skiql.Skiql.RelationshipSpec");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					((
						ruleIndirectRelationshipSpec
					)
					)=>
					(
						{
							newCompositeNode(grammarAccess.getNestedRelationshipQueryAccess().getToIndirectRelationshipSpecParserRuleCall_6_1_1_0());
						}
						lv_to_9_0=ruleIndirectRelationshipSpec
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNestedRelationshipQueryRule());
							}
							add(
								$current,
								"to",
								lv_to_9_0,
								"es.um.uschema.xtext.skiql.Skiql.IndirectRelationshipSpec");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getNestedRelationshipQueryAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleRelationshipSpec
entryRuleRelationshipSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationshipSpecRule()); }
	iv_ruleRelationshipSpec=ruleRelationshipSpec
	{ $current=$iv_ruleRelationshipSpec.current; }
	EOF;

// Rule RelationshipSpec
ruleRelationshipSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRelationshipSpecAccess().getRelationshipSpecAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationshipSpecAccess().getTargetExpressionTargetExpressionParserRuleCall_1_0());
				}
				lv_targetExpression_1_0=ruleTargetExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationshipSpecRule());
					}
					set(
						$current,
						"targetExpression",
						lv_targetExpression_1_0,
						"es.um.uschema.xtext.skiql.Skiql.TargetExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			((
				ruleRelationTypeSpec
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getRelationshipSpecAccess().getRelationSpecRelationTypeSpecParserRuleCall_2_0());
				}
				lv_relationSpec_2_0=ruleRelationTypeSpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationshipSpecRule());
					}
					set(
						$current,
						"relationSpec",
						lv_relationSpec_2_0,
						"es.um.uschema.xtext.skiql.Skiql.RelationTypeSpec");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleRelationTypeSpec
entryRuleRelationTypeSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationTypeSpecRule()); }
	iv_ruleRelationTypeSpec=ruleRelationTypeSpec
	{ $current=$iv_ruleRelationTypeSpec.current; }
	EOF;

// Rule RelationTypeSpec
ruleRelationTypeSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRelationTypeSpecAccess().getRelationSpecParserRuleCall_0());
		}
		this_RelationSpec_0=ruleRelationSpec
		{
			$current = $this_RelationSpec_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRelationTypeSpecAccess().getReferenceSpecParserRuleCall_1());
		}
		this_ReferenceSpec_1=ruleReferenceSpec
		{
			$current = $this_ReferenceSpec_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRelationTypeSpecAccess().getAggregationSpecParserRuleCall_2());
		}
		this_AggregationSpec_2=ruleAggregationSpec
		{
			$current = $this_AggregationSpec_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRelationSpec
entryRuleRelationSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationSpecRule()); }
	iv_ruleRelationSpec=ruleRelationSpec
	{ $current=$iv_ruleRelationSpec.current; }
	EOF;

// Rule RelationSpec
ruleRelationSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRelationSpecAccess().getRelationSpecAction_0(),
					$current);
			}
		)
		otherlv_1='ANY'
		{
			newLeafNode(otherlv_1, grammarAccess.getRelationSpecAccess().getANYKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getRelationSpecAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelationSpecRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"es.um.uschema.xtext.skiql.Skiql.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleReferenceSpec
entryRuleReferenceSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReferenceSpecRule()); }
	iv_ruleReferenceSpec=ruleReferenceSpec
	{ $current=$iv_ruleReferenceSpec.current; }
	EOF;

// Rule ReferenceSpec
ruleReferenceSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReferenceSpecAccess().getReferenceSpecAction_0(),
					$current);
			}
		)
		otherlv_1='REF'
		{
			newLeafNode(otherlv_1, grammarAccess.getReferenceSpecAccess().getREFKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getReferenceSpecAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReferenceSpecRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"es.um.uschema.xtext.skiql.Skiql.ID");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getReferenceSpecAccess().getVariationFilterVariationFilterParserRuleCall_3_0());
				}
				lv_variationFilter_3_0=ruleVariationFilter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReferenceSpecRule());
					}
					set(
						$current,
						"variationFilter",
						lv_variationFilter_3_0,
						"es.um.uschema.xtext.skiql.Skiql.VariationFilter");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleAggregationSpec
entryRuleAggregationSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAggregationSpecRule()); }
	iv_ruleAggregationSpec=ruleAggregationSpec
	{ $current=$iv_ruleAggregationSpec.current; }
	EOF;

// Rule AggregationSpec
ruleAggregationSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAggregationSpecAccess().getAggregationSpecAction_0(),
					$current);
			}
		)
		otherlv_1='AGGR'
		{
			newLeafNode(otherlv_1, grammarAccess.getAggregationSpecAccess().getAGGRKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getAggregationSpecAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAggregationSpecRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"es.um.uschema.xtext.skiql.Skiql.ID");
				}
			)
		)?
	)
;

// Entry rule entryRuleIndirectRelationshipSpec
entryRuleIndirectRelationshipSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndirectRelationshipSpecRule()); }
	iv_ruleIndirectRelationshipSpec=ruleIndirectRelationshipSpec
	{ $current=$iv_ruleIndirectRelationshipSpec.current; }
	EOF;

// Rule IndirectRelationshipSpec
ruleIndirectRelationshipSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIndirectRelationshipSpecAccess().getRelationshipSpecAction_0(),
					$current);
			}
		)
		(
			(
				lv_indirect_1_0='>>'
				{
					newLeafNode(lv_indirect_1_0, grammarAccess.getIndirectRelationshipSpecAccess().getIndirectGreaterThanSignGreaterThanSignKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIndirectRelationshipSpecRule());
					}
					setWithLastConsumed($current, "indirect", lv_indirect_1_0 != null, ">>");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIndirectRelationshipSpecAccess().getTargetExpressionTargetExpressionParserRuleCall_2_0());
				}
				lv_targetExpression_2_0=ruleTargetExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndirectRelationshipSpecRule());
					}
					set(
						$current,
						"targetExpression",
						lv_targetExpression_2_0,
						"es.um.uschema.xtext.skiql.Skiql.TargetExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			((
				ruleIndirectRelationTypeSpec
			)
			)=>
			(
				{
					newCompositeNode(grammarAccess.getIndirectRelationshipSpecAccess().getRelationSpecIndirectRelationTypeSpecParserRuleCall_3_0());
				}
				lv_relationSpec_3_0=ruleIndirectRelationTypeSpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndirectRelationshipSpecRule());
					}
					set(
						$current,
						"relationSpec",
						lv_relationSpec_3_0,
						"es.um.uschema.xtext.skiql.Skiql.IndirectRelationTypeSpec");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleIndirectRelationTypeSpec
entryRuleIndirectRelationTypeSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndirectRelationTypeSpecRule()); }
	iv_ruleIndirectRelationTypeSpec=ruleIndirectRelationTypeSpec
	{ $current=$iv_ruleIndirectRelationTypeSpec.current; }
	EOF;

// Rule IndirectRelationTypeSpec
ruleIndirectRelationTypeSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getIndirectRelationTypeSpecAccess().getIndirectReferenceSpecParserRuleCall_0());
		}
		this_IndirectReferenceSpec_0=ruleIndirectReferenceSpec
		{
			$current = $this_IndirectReferenceSpec_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIndirectRelationTypeSpecAccess().getIndirectAggregationSpecParserRuleCall_1());
		}
		this_IndirectAggregationSpec_1=ruleIndirectAggregationSpec
		{
			$current = $this_IndirectAggregationSpec_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIndirectReferenceSpec
entryRuleIndirectReferenceSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndirectReferenceSpecRule()); }
	iv_ruleIndirectReferenceSpec=ruleIndirectReferenceSpec
	{ $current=$iv_ruleIndirectReferenceSpec.current; }
	EOF;

// Rule IndirectReferenceSpec
ruleIndirectReferenceSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIndirectReferenceSpecAccess().getReferenceSpecAction_0(),
					$current);
			}
		)
		otherlv_1='REF'
		{
			newLeafNode(otherlv_1, grammarAccess.getIndirectReferenceSpecAccess().getREFKeyword_1());
		}
	)
;

// Entry rule entryRuleIndirectAggregationSpec
entryRuleIndirectAggregationSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndirectAggregationSpecRule()); }
	iv_ruleIndirectAggregationSpec=ruleIndirectAggregationSpec
	{ $current=$iv_ruleIndirectAggregationSpec.current; }
	EOF;

// Rule IndirectAggregationSpec
ruleIndirectAggregationSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIndirectAggregationSpecAccess().getAggregationSpecAction_0(),
					$current);
			}
		)
		otherlv_1='AGGR'
		{
			newLeafNode(otherlv_1, grammarAccess.getIndirectAggregationSpecAccess().getAGGRKeyword_1());
		}
	)
;

// Entry rule entryRuleTargetExpression
entryRuleTargetExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTargetExpressionRule()); }
	iv_ruleTargetExpression=ruleTargetExpression
	{ $current=$iv_ruleTargetExpression.current; }
	EOF;

// Rule TargetExpression
ruleTargetExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTargetExpressionAccess().getRelationshipExpressionParserRuleCall_0());
		}
		this_RelationshipExpression_0=ruleRelationshipExpression
		{
			$current = $this_RelationshipExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTargetExpressionAccess().getEntityExpressionParserRuleCall_1());
		}
		this_EntityExpression_1=ruleEntityExpression
		{
			$current = $this_EntityExpression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRelationshipExpression
entryRuleRelationshipExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationshipExpressionRule()); }
	iv_ruleRelationshipExpression=ruleRelationshipExpression
	{ $current=$iv_ruleRelationshipExpression.current; }
	EOF;

// Rule RelationshipExpression
ruleRelationshipExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRelationshipExpressionAccess().getRelationshipExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationshipExpressionAccess().getRelationshipQueryNestedRelationshipQueryParserRuleCall_1_0());
				}
				lv_relationshipQuery_1_0=ruleNestedRelationshipQuery
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationshipExpressionRule());
					}
					set(
						$current,
						"relationshipQuery",
						lv_relationshipQuery_1_0,
						"es.um.uschema.xtext.skiql.Skiql.NestedRelationshipQuery");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEntityExpression
entryRuleEntityExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntityExpressionRule()); }
	iv_ruleEntityExpression=ruleEntityExpression
	{ $current=$iv_ruleEntityExpression.current; }
	EOF;

// Rule EntityExpression
ruleEntityExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEntityExpressionAccess().getEntityExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEntityExpressionAccess().getEntitySpecToReferenceEntitySpecParserRuleCall_1_0());
				}
				lv_entitySpec_1_0=ruleToReferenceEntitySpec
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntityExpressionRule());
					}
					set(
						$current,
						"entitySpec",
						lv_entitySpec_1_0,
						"es.um.uschema.xtext.skiql.Skiql.ToReferenceEntitySpec");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleToReferenceEntitySpec
entryRuleToReferenceEntitySpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getToReferenceEntitySpecRule()); }
	iv_ruleToReferenceEntitySpec=ruleToReferenceEntitySpec
	{ $current=$iv_ruleToReferenceEntitySpec.current; }
	EOF;

// Rule ToReferenceEntitySpec
ruleToReferenceEntitySpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getToReferenceEntitySpecAccess().getEntitySpecAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_name_1_1=RULE_ID
					{
						newLeafNode(lv_name_1_1, grammarAccess.getToReferenceEntitySpecAccess().getNameIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getToReferenceEntitySpecRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_1,
							"es.um.uschema.xtext.skiql.Skiql.ID");
					}
					    |
					lv_name_1_2='*'
					{
						newLeafNode(lv_name_1_2, grammarAccess.getToReferenceEntitySpecAccess().getNameAsteriskKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getToReferenceEntitySpecRule());
						}
						setWithLastConsumed($current, "name", lv_name_1_2, null);
					}
					    |
					lv_name_1_3='_'
					{
						newLeafNode(lv_name_1_3, grammarAccess.getToReferenceEntitySpecAccess().getName_Keyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getToReferenceEntitySpecRule());
						}
						setWithLastConsumed($current, "name", lv_name_1_3, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getToReferenceEntitySpecAccess().getVariationFilterReferenceVariationFilterParserRuleCall_2_0());
				}
				lv_variationFilter_2_0=ruleReferenceVariationFilter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getToReferenceEntitySpecRule());
					}
					set(
						$current,
						"variationFilter",
						lv_variationFilter_2_0,
						"es.um.uschema.xtext.skiql.Skiql.ReferenceVariationFilter");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleReferenceVariationFilter
entryRuleReferenceVariationFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReferenceVariationFilterRule()); }
	iv_ruleReferenceVariationFilter=ruleReferenceVariationFilter
	{ $current=$iv_ruleReferenceVariationFilter.current; }
	EOF;

// Rule ReferenceVariationFilter
ruleReferenceVariationFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReferenceVariationFilterAccess().getVariationFilterAction_0(),
					$current);
			}
		)
		(
			otherlv_1='[]'
			{
				newLeafNode(otherlv_1, grammarAccess.getReferenceVariationFilterAccess().getLeftSquareBracketRightSquareBracketKeyword_1_0());
			}
			    |
			(
				otherlv_2='['
				{
					newLeafNode(otherlv_2, grammarAccess.getReferenceVariationFilterAccess().getLeftSquareBracketKeyword_1_1_0());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getReferenceVariationFilterAccess().getPropertySpecsReferencePropertySpecParserRuleCall_1_1_1_0_0());
							}
							lv_propertySpecs_3_0=ruleReferencePropertySpec
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getReferenceVariationFilterRule());
								}
								add(
									$current,
									"propertySpecs",
									lv_propertySpecs_3_0,
									"es.um.uschema.xtext.skiql.Skiql.ReferencePropertySpec");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_4=','
						{
							newLeafNode(otherlv_4, grammarAccess.getReferenceVariationFilterAccess().getCommaKeyword_1_1_1_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getReferenceVariationFilterAccess().getPropertySpecsReferencePropertySpecParserRuleCall_1_1_1_1_1_0());
								}
								lv_propertySpecs_5_0=ruleReferencePropertySpec
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getReferenceVariationFilterRule());
									}
									add(
										$current,
										"propertySpecs",
										lv_propertySpecs_5_0,
										"es.um.uschema.xtext.skiql.Skiql.ReferencePropertySpec");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				otherlv_6=']'
				{
					newLeafNode(otherlv_6, grammarAccess.getReferenceVariationFilterAccess().getRightSquareBracketKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleReferencePropertySpec
entryRuleReferencePropertySpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReferencePropertySpecRule()); }
	iv_ruleReferencePropertySpec=ruleReferencePropertySpec
	{ $current=$iv_ruleReferencePropertySpec.current; }
	EOF;

// Rule ReferencePropertySpec
ruleReferencePropertySpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReferencePropertySpecAccess().getPropertySpecAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_name_1_1=RULE_ID
					{
						newLeafNode(lv_name_1_1, grammarAccess.getReferencePropertySpecAccess().getNameIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getReferencePropertySpecRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_1,
							"es.um.uschema.xtext.skiql.Skiql.ID");
					}
					    |
					lv_name_1_2='*'
					{
						newLeafNode(lv_name_1_2, grammarAccess.getReferencePropertySpecAccess().getNameAsteriskKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getReferencePropertySpecRule());
						}
						setWithLastConsumed($current, "name", lv_name_1_2, null);
					}
				)
			)
		)
		(
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getReferencePropertySpecAccess().getColonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReferencePropertySpecAccess().getTypePrimitiveTypeParserRuleCall_2_1_0());
					}
					lv_type_3_0=rulePrimitiveType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReferencePropertySpecRule());
						}
						set(
							$current,
							"type",
							lv_type_3_0,
							"es.um.uschema.xtext.skiql.Skiql.PrimitiveType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleVariationFilter
entryRuleVariationFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariationFilterRule()); }
	iv_ruleVariationFilter=ruleVariationFilter
	{ $current=$iv_ruleVariationFilter.current; }
	EOF;

// Rule VariationFilter
ruleVariationFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariationFilterAccess().getVariationFilterAction_0(),
					$current);
			}
		)
		(
			otherlv_1='[]'
			{
				newLeafNode(otherlv_1, grammarAccess.getVariationFilterAccess().getLeftSquareBracketRightSquareBracketKeyword_1_0());
			}
			    |
			(
				otherlv_2='['
				{
					newLeafNode(otherlv_2, grammarAccess.getVariationFilterAccess().getLeftSquareBracketKeyword_1_1_0());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getVariationFilterAccess().getPropertySpecsPropertySpecParserRuleCall_1_1_1_0_0());
							}
							lv_propertySpecs_3_0=rulePropertySpec
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVariationFilterRule());
								}
								add(
									$current,
									"propertySpecs",
									lv_propertySpecs_3_0,
									"es.um.uschema.xtext.skiql.Skiql.PropertySpec");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_4=','
						{
							newLeafNode(otherlv_4, grammarAccess.getVariationFilterAccess().getCommaKeyword_1_1_1_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getVariationFilterAccess().getPropertySpecsPropertySpecParserRuleCall_1_1_1_1_1_0());
								}
								lv_propertySpecs_5_0=rulePropertySpec
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getVariationFilterRule());
									}
									add(
										$current,
										"propertySpecs",
										lv_propertySpecs_5_0,
										"es.um.uschema.xtext.skiql.Skiql.PropertySpec");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				otherlv_6=']'
				{
					newLeafNode(otherlv_6, grammarAccess.getVariationFilterAccess().getRightSquareBracketKeyword_1_1_2());
				}
				(
					(
						lv_only_7_0='ONLY'
						{
							newLeafNode(lv_only_7_0, grammarAccess.getVariationFilterAccess().getOnlyONLYKeyword_1_1_3_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVariationFilterRule());
							}
							setWithLastConsumed($current, "only", lv_only_7_0 != null, "ONLY");
						}
					)
				)?
			)
		)
	)
;

// Entry rule entryRulePropertySpec
entryRulePropertySpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertySpecRule()); }
	iv_rulePropertySpec=rulePropertySpec
	{ $current=$iv_rulePropertySpec.current; }
	EOF;

// Rule PropertySpec
rulePropertySpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPropertySpecAccess().getPropertySpecAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_name_1_1=RULE_ID
					{
						newLeafNode(lv_name_1_1, grammarAccess.getPropertySpecAccess().getNameIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPropertySpecRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_1,
							"es.um.uschema.xtext.skiql.Skiql.ID");
					}
					    |
					lv_name_1_2='*'
					{
						newLeafNode(lv_name_1_2, grammarAccess.getPropertySpecAccess().getNameAsteriskKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPropertySpecRule());
						}
						setWithLastConsumed($current, "name", lv_name_1_2, null);
					}
				)
			)
		)
		(
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getPropertySpecAccess().getColonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPropertySpecAccess().getTypeTypeParserRuleCall_2_1_0());
					}
					lv_type_3_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPropertySpecRule());
						}
						set(
							$current,
							"type",
							lv_type_3_0,
							"es.um.uschema.xtext.skiql.Skiql.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_0());
		}
		this_PrimitiveType_0=rulePrimitiveType
		{
			$current = $this_PrimitiveType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getRelationshipTypeParserRuleCall_1());
		}
		this_RelationshipType_1=ruleRelationshipType
		{
			$current = $this_RelationshipType_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrimitiveType
entryRulePrimitiveType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeRule()); }
	iv_rulePrimitiveType=rulePrimitiveType
	{ $current=$iv_rulePrimitiveType.current; }
	EOF;

// Rule PrimitiveType
rulePrimitiveType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPrimitiveTypeAccess().getPrimitiveTypeAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getTypeTypeEnumEnumRuleCall_1_0());
				}
				lv_type_1_0=ruleTypeEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimitiveTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"es.um.uschema.xtext.skiql.Skiql.TypeEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_array_2_0='[]'
				{
					newLeafNode(lv_array_2_0, grammarAccess.getPrimitiveTypeAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimitiveTypeRule());
					}
					setWithLastConsumed($current, "array", lv_array_2_0 != null, "[]");
				}
			)
		)?
	)
;

// Entry rule entryRuleRelationshipType
entryRuleRelationshipType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationshipTypeRule()); }
	iv_ruleRelationshipType=ruleRelationshipType
	{ $current=$iv_ruleRelationshipType.current; }
	EOF;

// Rule RelationshipType
ruleRelationshipType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRelationshipTypeAccess().getRelationshipTypeAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationshipTypeAccess().getRelationTypeRelationshipTypeEnumEnumRuleCall_1_0());
				}
				lv_relationType_1_0=ruleRelationshipTypeEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationshipTypeRule());
					}
					set(
						$current,
						"relationType",
						lv_relationType_1_0,
						"es.um.uschema.xtext.skiql.Skiql.RelationshipTypeEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_targetEntityName_2_1=RULE_ID
					{
						newLeafNode(lv_targetEntityName_2_1, grammarAccess.getRelationshipTypeAccess().getTargetEntityNameIDTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRelationshipTypeRule());
						}
						setWithLastConsumed(
							$current,
							"targetEntityName",
							lv_targetEntityName_2_1,
							"es.um.uschema.xtext.skiql.Skiql.ID");
					}
					    |
					lv_targetEntityName_2_2='*'
					{
						newLeafNode(lv_targetEntityName_2_2, grammarAccess.getRelationshipTypeAccess().getTargetEntityNameAsteriskKeyword_2_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRelationshipTypeRule());
						}
						setWithLastConsumed($current, "targetEntityName", lv_targetEntityName_2_2, null);
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleVersionHistory
entryRuleVersionHistory returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVersionHistoryRule()); }
	iv_ruleVersionHistory=ruleVersionHistory
	{ $current=$iv_ruleVersionHistory.current; }
	EOF;

// Rule VersionHistory
ruleVersionHistory returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVersionHistoryAccess().getBeforeHistoryParserRuleCall_0());
		}
		this_BeforeHistory_0=ruleBeforeHistory
		{
			$current = $this_BeforeHistory_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVersionHistoryAccess().getAfterHistoryParserRuleCall_1());
		}
		this_AfterHistory_1=ruleAfterHistory
		{
			$current = $this_AfterHistory_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVersionHistoryAccess().getBetweenHistoryParserRuleCall_2());
		}
		this_BetweenHistory_2=ruleBetweenHistory
		{
			$current = $this_BetweenHistory_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBeforeHistory
entryRuleBeforeHistory returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBeforeHistoryRule()); }
	iv_ruleBeforeHistory=ruleBeforeHistory
	{ $current=$iv_ruleBeforeHistory.current; }
	EOF;

// Rule BeforeHistory
ruleBeforeHistory returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBeforeHistoryAccess().getBeforeAction_0(),
					$current);
			}
		)
		otherlv_1='BEFORE'
		{
			newLeafNode(otherlv_1, grammarAccess.getBeforeHistoryAccess().getBEFOREKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getBeforeHistoryAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBeforeHistoryAccess().getDateTimeDateTimeParserRuleCall_3_0());
				}
				lv_dateTime_3_0=ruleDateTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBeforeHistoryRule());
					}
					set(
						$current,
						"dateTime",
						lv_dateTime_3_0,
						"es.um.uschema.xtext.skiql.Skiql.DateTime");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getBeforeHistoryAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleAfterHistory
entryRuleAfterHistory returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAfterHistoryRule()); }
	iv_ruleAfterHistory=ruleAfterHistory
	{ $current=$iv_ruleAfterHistory.current; }
	EOF;

// Rule AfterHistory
ruleAfterHistory returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAfterHistoryAccess().getAfterAction_0(),
					$current);
			}
		)
		otherlv_1='AFTER'
		{
			newLeafNode(otherlv_1, grammarAccess.getAfterHistoryAccess().getAFTERKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getAfterHistoryAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAfterHistoryAccess().getDateTimeDateTimeParserRuleCall_3_0());
				}
				lv_dateTime_3_0=ruleDateTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAfterHistoryRule());
					}
					set(
						$current,
						"dateTime",
						lv_dateTime_3_0,
						"es.um.uschema.xtext.skiql.Skiql.DateTime");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getAfterHistoryAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleBetweenHistory
entryRuleBetweenHistory returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBetweenHistoryRule()); }
	iv_ruleBetweenHistory=ruleBetweenHistory
	{ $current=$iv_ruleBetweenHistory.current; }
	EOF;

// Rule BetweenHistory
ruleBetweenHistory returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBetweenHistoryAccess().getBetweenAction_0(),
					$current);
			}
		)
		otherlv_1='BETWEEN'
		{
			newLeafNode(otherlv_1, grammarAccess.getBetweenHistoryAccess().getBETWEENKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getBetweenHistoryAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBetweenHistoryAccess().getAfterDateTimeDateTimeParserRuleCall_3_0());
				}
				lv_afterDateTime_3_0=ruleDateTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBetweenHistoryRule());
					}
					set(
						$current,
						"afterDateTime",
						lv_afterDateTime_3_0,
						"es.um.uschema.xtext.skiql.Skiql.DateTime");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getBetweenHistoryAccess().getCommaKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBetweenHistoryAccess().getBeforeDateTimeDateTimeParserRuleCall_5_0());
				}
				lv_beforeDateTime_5_0=ruleDateTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBetweenHistoryRule());
					}
					set(
						$current,
						"beforeDateTime",
						lv_beforeDateTime_5_0,
						"es.um.uschema.xtext.skiql.Skiql.DateTime");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getBetweenHistoryAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleDateTime
entryRuleDateTime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDateTimeRule()); }
	iv_ruleDateTime=ruleDateTime
	{ $current=$iv_ruleDateTime.current; }
	EOF;

// Rule DateTime
ruleDateTime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDateTimeAccess().getDateTimeAction_0(),
					$current);
			}
		)
		(
			(
				lv_year_1_0=RULE_INT
				{
					newLeafNode(lv_year_1_0, grammarAccess.getDateTimeAccess().getYearINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDateTimeRule());
					}
					setWithLastConsumed(
						$current,
						"year",
						lv_year_1_0,
						"es.um.uschema.xtext.skiql.Skiql.INT");
				}
			)
		)
		otherlv_2='-'
		{
			newLeafNode(otherlv_2, grammarAccess.getDateTimeAccess().getHyphenMinusKeyword_2());
		}
		(
			(
				lv_month_3_0=RULE_INT
				{
					newLeafNode(lv_month_3_0, grammarAccess.getDateTimeAccess().getMonthINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDateTimeRule());
					}
					setWithLastConsumed(
						$current,
						"month",
						lv_month_3_0,
						"es.um.uschema.xtext.skiql.Skiql.INT");
				}
			)
		)
		otherlv_4='-'
		{
			newLeafNode(otherlv_4, grammarAccess.getDateTimeAccess().getHyphenMinusKeyword_4());
		}
		(
			(
				lv_day_5_0=RULE_INT
				{
					newLeafNode(lv_day_5_0, grammarAccess.getDateTimeAccess().getDayINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDateTimeRule());
					}
					setWithLastConsumed(
						$current,
						"day",
						lv_day_5_0,
						"es.um.uschema.xtext.skiql.Skiql.INT");
				}
			)
		)
		(
			(
				(
					lv_hour_6_0=RULE_INT
					{
						newLeafNode(lv_hour_6_0, grammarAccess.getDateTimeAccess().getHourINTTerminalRuleCall_6_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDateTimeRule());
						}
						setWithLastConsumed(
							$current,
							"hour",
							lv_hour_6_0,
							"es.um.uschema.xtext.skiql.Skiql.INT");
					}
				)
			)
			otherlv_7=':'
			{
				newLeafNode(otherlv_7, grammarAccess.getDateTimeAccess().getColonKeyword_6_1());
			}
			(
				(
					lv_minutes_8_0=RULE_INT
					{
						newLeafNode(lv_minutes_8_0, grammarAccess.getDateTimeAccess().getMinutesINTTerminalRuleCall_6_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDateTimeRule());
						}
						setWithLastConsumed(
							$current,
							"minutes",
							lv_minutes_8_0,
							"es.um.uschema.xtext.skiql.Skiql.INT");
					}
				)
			)
			otherlv_9=':'
			{
				newLeafNode(otherlv_9, grammarAccess.getDateTimeAccess().getColonKeyword_6_3());
			}
			(
				(
					lv_seconds_10_0=RULE_INT
					{
						newLeafNode(lv_seconds_10_0, grammarAccess.getDateTimeAccess().getSecondsINTTerminalRuleCall_6_4_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDateTimeRule());
						}
						setWithLastConsumed(
							$current,
							"seconds",
							lv_seconds_10_0,
							"es.um.uschema.xtext.skiql.Skiql.INT");
					}
				)
			)
		)?
	)
;

// Rule TypeEnum
ruleTypeEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='string'
			{
				$current = grammarAccess.getTypeEnumAccess().getSTRINGEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTypeEnumAccess().getSTRINGEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='number'
			{
				$current = grammarAccess.getTypeEnumAccess().getNUMBEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTypeEnumAccess().getNUMBEREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='boolean'
			{
				$current = grammarAccess.getTypeEnumAccess().getBOOLEANEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTypeEnumAccess().getBOOLEANEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule RelationshipTypeEnum
ruleRelationshipTypeEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='ANY'
			{
				$current = grammarAccess.getRelationshipTypeEnumAccess().getRELATIONSHIPEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRelationshipTypeEnumAccess().getRELATIONSHIPEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='REF'
			{
				$current = grammarAccess.getRelationshipTypeEnumAccess().getREFERENCEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRelationshipTypeEnumAccess().getREFERENCEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='AGGR'
			{
				$current = grammarAccess.getRelationshipTypeEnumAccess().getAGGREGATIONEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getRelationshipTypeEnumAccess().getAGGREGATIONEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'*') ('a'..'z'|'A'..'Z'|'_'|'*'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
