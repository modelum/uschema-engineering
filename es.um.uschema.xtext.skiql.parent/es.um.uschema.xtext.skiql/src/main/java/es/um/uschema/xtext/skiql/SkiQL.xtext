// automatically generated by Xtext
grammar es.um.uschema.xtext.skiql.Skiql with org.eclipse.xtext.common.Terminals

import "http://www.um.es/uschema/xtext/SkiQL"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

SkiQLModel returns SkiQLModel:
	{SkiQLModel}
	query=Query
;

Query returns Query:
	EntityTypeQuery | RelationshipTypeQuery | RelationshipQuery | AnyQuery
;

EntityTypeQuery returns SchemaQuery:
	{SchemaQuery}
	'ENTITY' schemaSpec=EntitySpec 
	(
		 (operation=Operation)
	)?
;

RelationshipTypeQuery returns SchemaQuery:
	{SchemaQuery}
	'REL' schemaSpec=RelationshipTypeSpec 
	(
		 (operation=Operation)
	)?
;

AnyQuery returns SchemaQuery:
	{SchemaQuery}
	'ANY' schemaSpec=SchemaTypeSpec 
	(
		 (operation=Operation)
	)?
;

Operation returns Operation:
	KeysSpec | VersionHistory
;

KeysSpec returns KeysSpec:
	{KeysSpec}
	'KEYS'
;

RelationshipTypeSpec returns RelationshipTypeSpec:
	{RelationshipTypeSpec}
	name=(ID | '*') variationFilter=VariationFilter?
;

SchemaTypeSpec returns SchemaSpec:
	{SchemaSpec}
	name=(ID | '*') variationFilter=VariationFilter?
;

EntitySpec returns EntitySpec:
	{EntitySpec}
	name=(ID | '*') variationFilter=VariationFilter?
;

ReferenceEntitySpec returns EntitySpec:
	{EntitySpec}
	name=(ID | '*' | '_') variationFilter=ReferenceVariationFilter?
;

RelationshipQuery returns RelationshipQuery:
	{RelationshipQuery}
	'FROM' from=ReferenceEntitySpec
	'TO' (to+=RelationshipSpec | => to+=IndirectRelationshipSpec)
	(=> ',' (to+=RelationshipSpec | => to+=IndirectRelationshipSpec))*
;

NestedRelationshipQuery returns RelationshipQuery:
	{RelationshipQuery}
	'{'
	'FROM'? from=ReferenceEntitySpec
	'TO' (to+=RelationshipSpec | => to+=IndirectRelationshipSpec)
	(=> ',' (to+=RelationshipSpec | => to+=IndirectRelationshipSpec))*
	'}'
;

RelationshipSpec returns RelationshipSpec:
	{RelationshipSpec}
	targetExpression=TargetExpression
	(=> relationSpec=RelationTypeSpec?)
;

RelationTypeSpec returns RelationSpec:
	RelationSpec | ReferenceSpec | AggregationSpec
;

RelationSpec returns RelationSpec:
	{RelationSpec}
	'ANY' name=ID
;

ReferenceSpec returns ReferenceSpec:
	{ReferenceSpec}
	'REF' (name=ID)? variationFilter=VariationFilter?
;

AggregationSpec returns AggregationSpec:
	{AggregationSpec}
	'AGGR' (name=ID)?
;

IndirectRelationshipSpec returns RelationshipSpec:
	{RelationshipSpec}
	indirect?='>>'
	targetExpression=TargetExpression
	(=> relationSpec=IndirectRelationTypeSpec?)
;

IndirectRelationTypeSpec returns RelationSpec:
	IndirectReferenceSpec | IndirectAggregationSpec
;

IndirectReferenceSpec returns ReferenceSpec:
	{ReferenceSpec}
	'REF'
;

IndirectAggregationSpec returns AggregationSpec:
	{AggregationSpec}
	'AGGR'
;

TargetExpression returns TargetExpression:
	RelationshipExpression | EntityExpression
;

RelationshipExpression returns RelationshipExpression:
	{RelationshipExpression}
	relationshipQuery=NestedRelationshipQuery
;

EntityExpression returns EntityExpression:
	{EntityExpression}
	entitySpec=ToReferenceEntitySpec
;

ToReferenceEntitySpec returns EntitySpec:
	{EntitySpec}
	name=(ID | '*' | '_') variationFilter=ReferenceVariationFilter?
;

ReferenceVariationFilter returns VariationFilter:
	{VariationFilter}
	('[]' | '[' (propertySpecs+=ReferencePropertySpec (',' propertySpecs+=ReferencePropertySpec)*)? ']')
;

ReferencePropertySpec returns PropertySpec:
	{PropertySpec}
	name=(ID|'*') (':' type=PrimitiveType)?
;

VariationFilter returns VariationFilter:
	{VariationFilter}
	('[]' | '[' (propertySpecs+=PropertySpec (',' propertySpecs+=PropertySpec)*)? ']' (only?='ONLY')?)
;

PropertySpec returns PropertySpec:
	{PropertySpec}
	name=(ID|'*') (':' type=Type)?
;

Type returns Type:
	PrimitiveType | RelationshipType
;

PrimitiveType returns PrimitiveType:
	{PrimitiveType}
	type=TypeEnum (array?='[]')?
;

enum TypeEnum returns TypeEnum:
	STRING='string' | NUMBER='number' | BOOLEAN='boolean'
;

RelationshipType returns RelationshipType:
	{RelationshipType}
	relationType=RelationshipTypeEnum targetEntityName=(ID|'*')?
;

enum RelationshipTypeEnum returns RelationshipTypeEnum:
	RELATIONSHIP='ANY' | REFERENCE='REF' | AGGREGATION='AGGR'
;

VersionHistory returns VersionHistoryOperation:
	BeforeHistory | AfterHistory | BetweenHistory
;

BeforeHistory returns Before:
	{Before}
	'BEFORE' '(' dateTime=DateTime ')'
;

AfterHistory returns After:
	{After}
	'AFTER' '(' dateTime=DateTime ')'
;

BetweenHistory returns Between:
	{Between}
	'BETWEEN' '(' afterDateTime=DateTime ',' beforeDateTime=DateTime ')'
;

DateTime returns DateTime:
	{DateTime}
	(year=INT) '-' (month=INT) '-' (day=INT) (hour=INT ':' minutes=INT ':' seconds=INT)?
;


@Override
terminal ID returns ecore::EString: ('a'..'z'|'A'..'Z'|'_'|'*')('a'..'z'|'A'..'Z'|'_'|'*'|'0'..'9')*;

@Override
terminal INT returns ecore::EInt: ('0'..'9')+;